'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace SpreadWebReference
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getUserSentReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserCreditOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubscriberDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignSubscriberDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUploadRequestStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnsubscribeEmailInAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnsubscribeEmailInContactListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createCampaignDraftOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createCampaignDraft2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private createCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateCampaignBySimpleTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createCampaign2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCampaignStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendSMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSmsRepliesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignReport2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePublishStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAllSubscriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSubscriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSubscriptions2StringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubscribersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createSubscriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createContactListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addSubscriberByEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSubscribersFromListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSubscribersFromAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addSubscriberByInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addSubscribersByInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addSubscribersByInfo2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Send2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Send3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendmultipleAttachmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendMTREmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendWithAttachmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendSimpleAttachmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EmailSendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMemberEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendTemplateEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendAndCcOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmailStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMSStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignsSend2TalkkingUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendBatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SearchContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SplitContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExcludeContactListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignDetailReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignSentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignOpensOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignOpensJsonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignOpensWithNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignClicksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignClicksWithNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignUnsubscribesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountUnsubscribesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountUnsubscribesToFtpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignAbusesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignConversionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignConvertionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignBouncesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSenderEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddOrUpdateWebhookOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateNewAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TransferCreditOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UplodeZipFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadContactListFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ActivationCampaignByFtpFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NameExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EmailExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccessTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VerifyAccessTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAPIKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCampaignDailyLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCampaignTimeLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SplitContactListByRangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getActiveSubscribersByContactListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createCampaignDraftSerializeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createCampaignSerializeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createCampaign2SerializeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignReportSerializeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addSubscriberByInfoSerializeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addSubscribersByInfoSerializeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExcludeContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExcludeContactsByDomainOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExcludeContactsByNetEaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNetEaseRankOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://service.rspread.com/service.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getUserSentReportCompleted As getUserSentReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserCreditCompleted As GetUserCreditCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubscriberDetailCompleted As GetSubscriberDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignSubscriberDetailCompleted As GetCampaignSubscriberDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUploadRequestStatusCompleted As GetUploadRequestStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event UnsubscribeEmailInAccountCompleted As UnsubscribeEmailInAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event UnsubscribeEmailInContactListCompleted As UnsubscribeEmailInContactListCompletedEventHandler
        
        '''<remarks/>
        Public Event createCampaignDraftCompleted As createCampaignDraftCompletedEventHandler
        
        '''<remarks/>
        Public Event createCampaignDraft2Completed As createCampaignDraft2CompletedEventHandler
        
        '''<remarks/>
        Public Event createCampaignCompleted As createCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateCampaignBySimpleTypeCompleted As CreateCampaignBySimpleTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event createCampaign2Completed As createCampaign2CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCampaignStatusCompleted As UpdateCampaignStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event SendSMSCompleted As SendSMSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSmsRepliesCompleted As GetSmsRepliesCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignStatusCompleted As getCampaignStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignReportCompleted As getCampaignReportCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignReport2Completed As getCampaignReport2CompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePublishStatusCompleted As ChangePublishStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event getAllSubscriptionCompleted As getAllSubscriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event getSubscriptionCompleted As getSubscriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event getSubscriptions2StringCompleted As getSubscriptions2StringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubscribersCompleted As GetSubscribersCompletedEventHandler
        
        '''<remarks/>
        Public Event createSubscriptionCompleted As createSubscriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event createContactListCompleted As createContactListCompletedEventHandler
        
        '''<remarks/>
        Public Event addSubscriberByEmailCompleted As addSubscriberByEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSubscribersFromListCompleted As DeleteSubscribersFromListCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSubscribersFromAccountCompleted As DeleteSubscribersFromAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event addSubscriberByInfoCompleted As addSubscriberByInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event addSubscribersByInfoCompleted As addSubscribersByInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event addSubscribersByInfo2Completed As addSubscribersByInfo2CompletedEventHandler
        
        '''<remarks/>
        Public Event Send2Completed As Send2CompletedEventHandler
        
        '''<remarks/>
        Public Event Send3Completed As Send3CompletedEventHandler
        
        '''<remarks/>
        Public Event SendmultipleAttachmentCompleted As SendmultipleAttachmentCompletedEventHandler
        
        '''<remarks/>
        Public Event SendMTREmailCompleted As SendMTREmailCompletedEventHandler
        
        '''<remarks/>
        Public Event SendWithAttachmentCompleted As SendWithAttachmentCompletedEventHandler
        
        '''<remarks/>
        Public Event SendSimpleAttachmentCompleted As SendSimpleAttachmentCompletedEventHandler
        
        '''<remarks/>
        Public Event EmailSendCompleted As EmailSendCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMemberEmailCompleted As UpdateMemberEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event SendTemplateEmailCompleted As SendTemplateEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event SendCompleted As SendCompletedEventHandler
        
        '''<remarks/>
        Public Event SendAndCcCompleted As SendAndCcCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmailStatusCompleted As GetEmailStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMSStatusCompleted As GetSMSStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignsSend2TalkkingUserCompleted As GetCampaignsSend2TalkkingUserCompletedEventHandler
        
        '''<remarks/>
        Public Event SendBatchCompleted As SendBatchCompletedEventHandler
        
        '''<remarks/>
        Public Event SearchContactsCompleted As SearchContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event SplitContactsCompleted As SplitContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event ExcludeContactListCompleted As ExcludeContactListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignDetailReportCompleted As GetCampaignDetailReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignSentsCompleted As GetCampaignSentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignOpensCompleted As GetCampaignOpensCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignOpensJsonCompleted As GetCampaignOpensJsonCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignOpensWithNameCompleted As GetCampaignOpensWithNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignClicksCompleted As GetCampaignClicksCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignClicksWithNameCompleted As GetCampaignClicksWithNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignUnsubscribesCompleted As GetCampaignUnsubscribesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountUnsubscribesCompleted As GetAccountUnsubscribesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountUnsubscribesToFtpCompleted As GetAccountUnsubscribesToFtpCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignAbusesCompleted As GetCampaignAbusesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignConversionsCompleted As GetCampaignConversionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignConvertionsCompleted As GetCampaignConvertionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignBouncesCompleted As GetCampaignBouncesCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSenderEmailCompleted As AddSenderEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event AddOrUpdateWebhookCompleted As AddOrUpdateWebhookCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateNewAccountCompleted As CreateNewAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event TransferCreditCompleted As TransferCreditCompletedEventHandler
        
        '''<remarks/>
        Public Event UplodeZipFileCompleted As UplodeZipFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadContactListFileCompleted As UploadContactListFileCompletedEventHandler
        
        '''<remarks/>
        Public Event ActivationCampaignByFtpFileCompleted As ActivationCampaignByFtpFileCompletedEventHandler
        
        '''<remarks/>
        Public Event NameExistsCompleted As NameExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event EmailExistsCompleted As EmailExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignIDCompleted As getCampaignIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccessTokenCompleted As GetAccessTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event VerifyAccessTokenCompleted As VerifyAccessTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAPIKeyCompleted As GetAPIKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountInfoCompleted As GetAccountInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event SetCampaignDailyLimitCompleted As SetCampaignDailyLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event SetCampaignTimeLimitCompleted As SetCampaignTimeLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event SplitContactListByRangeCompleted As SplitContactListByRangeCompletedEventHandler
        
        '''<remarks/>
        Public Event getActiveSubscribersByContactListCompleted As getActiveSubscribersByContactListCompletedEventHandler
        
        '''<remarks/>
        Public Event createCampaignDraftSerializeCompleted As createCampaignDraftSerializeCompletedEventHandler
        
        '''<remarks/>
        Public Event createCampaignSerializeCompleted As createCampaignSerializeCompletedEventHandler
        
        '''<remarks/>
        Public Event createCampaign2SerializeCompleted As createCampaign2SerializeCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignReportSerializeCompleted As getCampaignReportSerializeCompletedEventHandler
        
        '''<remarks/>
        Public Event addSubscriberByInfoSerializeCompleted As addSubscriberByInfoSerializeCompletedEventHandler
        
        '''<remarks/>
        Public Event addSubscribersByInfoSerializeCompleted As addSubscribersByInfoSerializeCompletedEventHandler
        
        '''<remarks/>
        Public Event ExcludeContactsCompleted As ExcludeContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event ExcludeContactsByDomainCompleted As ExcludeContactsByDomainCompletedEventHandler
        
        '''<remarks/>
        Public Event ExcludeContactsByNetEaseCompleted As ExcludeContactsByNetEaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNetEaseRankCompleted As GetNetEaseRankCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getUserSentReport", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getUserSentReport(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountType As AccountType, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getUserSentReport", New Object() {loginEmail, APIKey, accountType, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUserSentReportAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountType As AccountType, ByVal startDate As Date, ByVal endDate As Date)
            Me.getUserSentReportAsync(loginEmail, APIKey, accountType, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUserSentReportAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountType As AccountType, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.getUserSentReportOperationCompleted Is Nothing) Then
                Me.getUserSentReportOperationCompleted = AddressOf Me.OngetUserSentReportOperationCompleted
            End If
            Me.InvokeAsync("getUserSentReport", New Object() {loginEmail, APIKey, accountType, startDate, endDate}, Me.getUserSentReportOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUserSentReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUserSentReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUserSentReportCompleted(Me, New getUserSentReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetUserCredit", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserCredit(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountType As AccountType) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserCredit", New Object() {loginEmail, APIKey, accountType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserCreditAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountType As AccountType)
            Me.GetUserCreditAsync(loginEmail, APIKey, accountType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserCreditAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountType As AccountType, ByVal userState As Object)
            If (Me.GetUserCreditOperationCompleted Is Nothing) Then
                Me.GetUserCreditOperationCompleted = AddressOf Me.OnGetUserCreditOperationCompleted
            End If
            Me.InvokeAsync("GetUserCredit", New Object() {loginEmail, APIKey, accountType}, Me.GetUserCreditOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserCreditOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserCreditCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserCreditCompleted(Me, New GetUserCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetSubscriberDetail", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubscriberDetail(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriber_email As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSubscriberDetail", New Object() {loginEmail, APIKey, subscriber_email})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubscriberDetailAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriber_email As String)
            Me.GetSubscriberDetailAsync(loginEmail, APIKey, subscriber_email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubscriberDetailAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriber_email As String, ByVal userState As Object)
            If (Me.GetSubscriberDetailOperationCompleted Is Nothing) Then
                Me.GetSubscriberDetailOperationCompleted = AddressOf Me.OnGetSubscriberDetailOperationCompleted
            End If
            Me.InvokeAsync("GetSubscriberDetail", New Object() {loginEmail, APIKey, subscriber_email}, Me.GetSubscriberDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubscriberDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubscriberDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubscriberDetailCompleted(Me, New GetSubscriberDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignSubscriberDetail", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignSubscriberDetail(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriber_email As String, ByVal campaign_id As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignSubscriberDetail", New Object() {loginEmail, APIKey, subscriber_email, campaign_id})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignSubscriberDetailAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriber_email As String, ByVal campaign_id As Integer)
            Me.GetCampaignSubscriberDetailAsync(loginEmail, APIKey, subscriber_email, campaign_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignSubscriberDetailAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriber_email As String, ByVal campaign_id As Integer, ByVal userState As Object)
            If (Me.GetCampaignSubscriberDetailOperationCompleted Is Nothing) Then
                Me.GetCampaignSubscriberDetailOperationCompleted = AddressOf Me.OnGetCampaignSubscriberDetailOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignSubscriberDetail", New Object() {loginEmail, APIKey, subscriber_email, campaign_id}, Me.GetCampaignSubscriberDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignSubscriberDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignSubscriberDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignSubscriberDetailCompleted(Me, New GetCampaignSubscriberDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetUploadRequestStatus", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUploadRequestStatus(ByVal loginEmail As String, ByVal APIKey As String, ByVal RequestID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUploadRequestStatus", New Object() {loginEmail, APIKey, RequestID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUploadRequestStatusAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal RequestID As String)
            Me.GetUploadRequestStatusAsync(loginEmail, APIKey, RequestID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUploadRequestStatusAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal RequestID As String, ByVal userState As Object)
            If (Me.GetUploadRequestStatusOperationCompleted Is Nothing) Then
                Me.GetUploadRequestStatusOperationCompleted = AddressOf Me.OnGetUploadRequestStatusOperationCompleted
            End If
            Me.InvokeAsync("GetUploadRequestStatus", New Object() {loginEmail, APIKey, RequestID}, Me.GetUploadRequestStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUploadRequestStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUploadRequestStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUploadRequestStatusCompleted(Me, New GetUploadRequestStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/UnsubscribeEmailInAccount", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnsubscribeEmailInAccount(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriberEmail As String) As Boolean
            Dim results() As Object = Me.Invoke("UnsubscribeEmailInAccount", New Object() {loginEmail, APIKey, subscriberEmail})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnsubscribeEmailInAccountAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriberEmail As String)
            Me.UnsubscribeEmailInAccountAsync(loginEmail, APIKey, subscriberEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnsubscribeEmailInAccountAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriberEmail As String, ByVal userState As Object)
            If (Me.UnsubscribeEmailInAccountOperationCompleted Is Nothing) Then
                Me.UnsubscribeEmailInAccountOperationCompleted = AddressOf Me.OnUnsubscribeEmailInAccountOperationCompleted
            End If
            Me.InvokeAsync("UnsubscribeEmailInAccount", New Object() {loginEmail, APIKey, subscriberEmail}, Me.UnsubscribeEmailInAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnsubscribeEmailInAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnsubscribeEmailInAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnsubscribeEmailInAccountCompleted(Me, New UnsubscribeEmailInAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/UnsubscribeEmailInContactList", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnsubscribeEmailInContactList(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriberEmail As String, ByVal contactListName As String) As Boolean
            Dim results() As Object = Me.Invoke("UnsubscribeEmailInContactList", New Object() {loginEmail, APIKey, subscriberEmail, contactListName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnsubscribeEmailInContactListAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriberEmail As String, ByVal contactListName As String)
            Me.UnsubscribeEmailInContactListAsync(loginEmail, APIKey, subscriberEmail, contactListName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnsubscribeEmailInContactListAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal subscriberEmail As String, ByVal contactListName As String, ByVal userState As Object)
            If (Me.UnsubscribeEmailInContactListOperationCompleted Is Nothing) Then
                Me.UnsubscribeEmailInContactListOperationCompleted = AddressOf Me.OnUnsubscribeEmailInContactListOperationCompleted
            End If
            Me.InvokeAsync("UnsubscribeEmailInContactList", New Object() {loginEmail, APIKey, subscriberEmail, contactListName}, Me.UnsubscribeEmailInContactListOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnsubscribeEmailInContactListOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnsubscribeEmailInContactListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnsubscribeEmailInContactListCompleted(Me, New UnsubscribeEmailInContactListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createCampaignDraft", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCampaignDraft(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer) As Integer
            Dim results() As Object = Me.Invoke("createCampaignDraft", New Object() {loginEmail, password, campaignArgs, category, interval})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCampaignDraftAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer)
            Me.createCampaignDraftAsync(loginEmail, password, campaignArgs, category, interval, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCampaignDraftAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer, ByVal userState As Object)
            If (Me.createCampaignDraftOperationCompleted Is Nothing) Then
                Me.createCampaignDraftOperationCompleted = AddressOf Me.OncreateCampaignDraftOperationCompleted
            End If
            Me.InvokeAsync("createCampaignDraft", New Object() {loginEmail, password, campaignArgs, category, interval}, Me.createCampaignDraftOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCampaignDraftOperationCompleted(ByVal arg As Object)
            If (Not (Me.createCampaignDraftCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCampaignDraftCompleted(Me, New createCampaignDraftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createCampaignDraft2", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCampaignDraft2(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer) As Integer
            Dim results() As Object = Me.Invoke("createCampaignDraft2", New Object() {loginEmail, password, campaignArgs, category, interval})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCampaignDraft2Async(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer)
            Me.createCampaignDraft2Async(loginEmail, password, campaignArgs, category, interval, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCampaignDraft2Async(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer, ByVal userState As Object)
            If (Me.createCampaignDraft2OperationCompleted Is Nothing) Then
                Me.createCampaignDraft2OperationCompleted = AddressOf Me.OncreateCampaignDraft2OperationCompleted
            End If
            Me.InvokeAsync("createCampaignDraft2", New Object() {loginEmail, password, campaignArgs, category, interval}, Me.createCampaignDraft2OperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCampaignDraft2OperationCompleted(ByVal arg As Object)
            If (Not (Me.createCampaignDraft2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCampaignDraft2Completed(Me, New createCampaignDraft2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createCampaign", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCampaign(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer) As Integer
            Dim results() As Object = Me.Invoke("createCampaign", New Object() {loginEmail, password, campaignArgs, category, interval})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCampaignAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer)
            Me.createCampaignAsync(loginEmail, password, campaignArgs, category, interval, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCampaignAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer, ByVal userState As Object)
            If (Me.createCampaignOperationCompleted Is Nothing) Then
                Me.createCampaignOperationCompleted = AddressOf Me.OncreateCampaignOperationCompleted
            End If
            Me.InvokeAsync("createCampaign", New Object() {loginEmail, password, campaignArgs, category, interval}, Me.createCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.createCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCampaignCompleted(Me, New createCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/CreateCampaignBySimpleType", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateCampaignBySimpleType(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, ByVal from As String, ByVal fromEmail As String, ByVal subject As String, ByVal content As String, ByVal schedule As Date, ByVal categorys As String, ByVal interval As Integer) As Integer
            Dim results() As Object = Me.Invoke("CreateCampaignBySimpleType", New Object() {loginEmail, password, campaignName, from, fromEmail, subject, content, schedule, categorys, interval})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateCampaignBySimpleTypeAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, ByVal from As String, ByVal fromEmail As String, ByVal subject As String, ByVal content As String, ByVal schedule As Date, ByVal categorys As String, ByVal interval As Integer)
            Me.CreateCampaignBySimpleTypeAsync(loginEmail, password, campaignName, from, fromEmail, subject, content, schedule, categorys, interval, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateCampaignBySimpleTypeAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, ByVal from As String, ByVal fromEmail As String, ByVal subject As String, ByVal content As String, ByVal schedule As Date, ByVal categorys As String, ByVal interval As Integer, ByVal userState As Object)
            If (Me.CreateCampaignBySimpleTypeOperationCompleted Is Nothing) Then
                Me.CreateCampaignBySimpleTypeOperationCompleted = AddressOf Me.OnCreateCampaignBySimpleTypeOperationCompleted
            End If
            Me.InvokeAsync("CreateCampaignBySimpleType", New Object() {loginEmail, password, campaignName, from, fromEmail, subject, content, schedule, categorys, interval}, Me.CreateCampaignBySimpleTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateCampaignBySimpleTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCampaignBySimpleTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCampaignBySimpleTypeCompleted(Me, New CreateCampaignBySimpleTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createCampaign2", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCampaign2(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByVal campaignCreatives() As CampaignCreatives, ByVal category() As String, ByVal interval As Integer, ByVal schedule As Date, ByVal signature As String, ByVal campaignStatus As CampaignStatus) As Integer
            Dim results() As Object = Me.Invoke("createCampaign2", New Object() {loginEmail, password, campaignName, campaignCreatives, category, interval, schedule, signature, campaignStatus})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCampaign2Async(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, ByVal campaignCreatives() As CampaignCreatives, ByVal category() As String, ByVal interval As Integer, ByVal schedule As Date, ByVal signature As String, ByVal campaignStatus As CampaignStatus)
            Me.createCampaign2Async(loginEmail, password, campaignName, campaignCreatives, category, interval, schedule, signature, campaignStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCampaign2Async(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, ByVal campaignCreatives() As CampaignCreatives, ByVal category() As String, ByVal interval As Integer, ByVal schedule As Date, ByVal signature As String, ByVal campaignStatus As CampaignStatus, ByVal userState As Object)
            If (Me.createCampaign2OperationCompleted Is Nothing) Then
                Me.createCampaign2OperationCompleted = AddressOf Me.OncreateCampaign2OperationCompleted
            End If
            Me.InvokeAsync("createCampaign2", New Object() {loginEmail, password, campaignName, campaignCreatives, category, interval, schedule, signature, campaignStatus}, Me.createCampaign2OperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCampaign2OperationCompleted(ByVal arg As Object)
            If (Not (Me.createCampaign2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCampaign2Completed(Me, New createCampaign2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/UpdateCampaignStatus", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCampaignStatus(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As String, ByVal campaignStatus As CampaignStatus) As Boolean
            Dim results() As Object = Me.Invoke("UpdateCampaignStatus", New Object() {loginEmail, password, campaignID, campaignStatus})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignStatusAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As String, ByVal campaignStatus As CampaignStatus)
            Me.UpdateCampaignStatusAsync(loginEmail, password, campaignID, campaignStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignStatusAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As String, ByVal campaignStatus As CampaignStatus, ByVal userState As Object)
            If (Me.UpdateCampaignStatusOperationCompleted Is Nothing) Then
                Me.UpdateCampaignStatusOperationCompleted = AddressOf Me.OnUpdateCampaignStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateCampaignStatus", New Object() {loginEmail, password, campaignID, campaignStatus}, Me.UpdateCampaignStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCampaignStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCampaignStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCampaignStatusCompleted(Me, New UpdateCampaignStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SendSMS", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendSMS(ByVal loginEmail As String, ByVal APIKey As String, ByVal SMSContent As String, ByVal sender As String, ByVal schedule As Date, ByVal campaignStatus As CampaignStatus, ByVal phoneSubscribers() As String, ByVal category() As String) As Integer
            Dim results() As Object = Me.Invoke("SendSMS", New Object() {loginEmail, APIKey, SMSContent, sender, schedule, campaignStatus, phoneSubscribers, category})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendSMSAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal SMSContent As String, ByVal sender As String, ByVal schedule As Date, ByVal campaignStatus As CampaignStatus, ByVal phoneSubscribers() As String, ByVal category() As String)
            Me.SendSMSAsync(loginEmail, APIKey, SMSContent, sender, schedule, campaignStatus, phoneSubscribers, category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendSMSAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal SMSContent As String, ByVal sender As String, ByVal schedule As Date, ByVal campaignStatus As CampaignStatus, ByVal phoneSubscribers() As String, ByVal category() As String, ByVal userState As Object)
            If (Me.SendSMSOperationCompleted Is Nothing) Then
                Me.SendSMSOperationCompleted = AddressOf Me.OnSendSMSOperationCompleted
            End If
            Me.InvokeAsync("SendSMS", New Object() {loginEmail, APIKey, SMSContent, sender, schedule, campaignStatus, phoneSubscribers, category}, Me.SendSMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendSMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendSMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendSMSCompleted(Me, New SendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetSmsReplies", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSmsReplies(ByVal loginEmail As String, ByVal password As String, ByVal campaignId As Integer) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetSmsReplies", New Object() {loginEmail, password, campaignId})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSmsRepliesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignId As Integer)
            Me.GetSmsRepliesAsync(loginEmail, password, campaignId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSmsRepliesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignId As Integer, ByVal userState As Object)
            If (Me.GetSmsRepliesOperationCompleted Is Nothing) Then
                Me.GetSmsRepliesOperationCompleted = AddressOf Me.OnGetSmsRepliesOperationCompleted
            End If
            Me.InvokeAsync("GetSmsReplies", New Object() {loginEmail, password, campaignId}, Me.GetSmsRepliesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSmsRepliesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSmsRepliesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSmsRepliesCompleted(Me, New GetSmsRepliesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getCampaignStatus", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCampaignStatus(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer) As CampaignStatus
            Dim results() As Object = Me.Invoke("getCampaignStatus", New Object() {loginEmail, password, campaignID})
            Return CType(results(0),CampaignStatus)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignStatusAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer)
            Me.getCampaignStatusAsync(loginEmail, password, campaignID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignStatusAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal userState As Object)
            If (Me.getCampaignStatusOperationCompleted Is Nothing) Then
                Me.getCampaignStatusOperationCompleted = AddressOf Me.OngetCampaignStatusOperationCompleted
            End If
            Me.InvokeAsync("getCampaignStatus", New Object() {loginEmail, password, campaignID}, Me.getCampaignStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignStatusCompleted(Me, New getCampaignStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getCampaignReport", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCampaignReport(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer) As CampaignReport
            Dim results() As Object = Me.Invoke("getCampaignReport", New Object() {loginEmail, password, campaignID})
            Return CType(results(0),CampaignReport)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignReportAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer)
            Me.getCampaignReportAsync(loginEmail, password, campaignID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignReportAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal userState As Object)
            If (Me.getCampaignReportOperationCompleted Is Nothing) Then
                Me.getCampaignReportOperationCompleted = AddressOf Me.OngetCampaignReportOperationCompleted
            End If
            Me.InvokeAsync("getCampaignReport", New Object() {loginEmail, password, campaignID}, Me.getCampaignReportOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignReportCompleted(Me, New getCampaignReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getCampaignReport2", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCampaignReport2(ByVal loginEmail As String, ByVal password As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCampaignReport2", New Object() {loginEmail, password})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignReport2Async(ByVal loginEmail As String, ByVal password As String)
            Me.getCampaignReport2Async(loginEmail, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignReport2Async(ByVal loginEmail As String, ByVal password As String, ByVal userState As Object)
            If (Me.getCampaignReport2OperationCompleted Is Nothing) Then
                Me.getCampaignReport2OperationCompleted = AddressOf Me.OngetCampaignReport2OperationCompleted
            End If
            Me.InvokeAsync("getCampaignReport2", New Object() {loginEmail, password}, Me.getCampaignReport2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignReport2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignReport2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignReport2Completed(Me, New getCampaignReport2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/ChangePublishStatus", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ChangePublishStatus(ByVal LoginEmail As String, ByVal Password As String, ByVal Campaign_id As String, ByVal isPublish As Boolean)
            Me.Invoke("ChangePublishStatus", New Object() {LoginEmail, Password, Campaign_id, isPublish})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePublishStatusAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal Campaign_id As String, ByVal isPublish As Boolean)
            Me.ChangePublishStatusAsync(LoginEmail, Password, Campaign_id, isPublish, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePublishStatusAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal Campaign_id As String, ByVal isPublish As Boolean, ByVal userState As Object)
            If (Me.ChangePublishStatusOperationCompleted Is Nothing) Then
                Me.ChangePublishStatusOperationCompleted = AddressOf Me.OnChangePublishStatusOperationCompleted
            End If
            Me.InvokeAsync("ChangePublishStatus", New Object() {LoginEmail, Password, Campaign_id, isPublish}, Me.ChangePublishStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePublishStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePublishStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePublishStatusCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getAllSubscription", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAllSubscription(ByVal loginEmail As String, ByVal password As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAllSubscription", New Object() {loginEmail, password})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAllSubscriptionAsync(ByVal loginEmail As String, ByVal password As String)
            Me.getAllSubscriptionAsync(loginEmail, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAllSubscriptionAsync(ByVal loginEmail As String, ByVal password As String, ByVal userState As Object)
            If (Me.getAllSubscriptionOperationCompleted Is Nothing) Then
                Me.getAllSubscriptionOperationCompleted = AddressOf Me.OngetAllSubscriptionOperationCompleted
            End If
            Me.InvokeAsync("getAllSubscription", New Object() {loginEmail, password}, Me.getAllSubscriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAllSubscriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAllSubscriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAllSubscriptionCompleted(Me, New getAllSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getSubscription", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSubscription(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getSubscription", New Object() {loginEmail, password, status})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSubscriptionAsync(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus)
            Me.getSubscriptionAsync(loginEmail, password, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSubscriptionAsync(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus, ByVal userState As Object)
            If (Me.getSubscriptionOperationCompleted Is Nothing) Then
                Me.getSubscriptionOperationCompleted = AddressOf Me.OngetSubscriptionOperationCompleted
            End If
            Me.InvokeAsync("getSubscription", New Object() {loginEmail, password, status}, Me.getSubscriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSubscriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSubscriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSubscriptionCompleted(Me, New getSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getSubscriptions2String", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSubscriptions2String(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus) As String
            Dim results() As Object = Me.Invoke("getSubscriptions2String", New Object() {loginEmail, password, status})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSubscriptions2StringAsync(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus)
            Me.getSubscriptions2StringAsync(loginEmail, password, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSubscriptions2StringAsync(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus, ByVal userState As Object)
            If (Me.getSubscriptions2StringOperationCompleted Is Nothing) Then
                Me.getSubscriptions2StringOperationCompleted = AddressOf Me.OngetSubscriptions2StringOperationCompleted
            End If
            Me.InvokeAsync("getSubscriptions2String", New Object() {loginEmail, password, status}, Me.getSubscriptions2StringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSubscriptions2StringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSubscriptions2StringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSubscriptions2StringCompleted(Me, New getSubscriptions2StringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetSubscribers", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubscribers(ByVal loginEmail As String, ByVal password As String, ByVal subscription As String, ByVal status As SubscriberStatus) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSubscribers", New Object() {loginEmail, password, subscription, status})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubscribersAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscription As String, ByVal status As SubscriberStatus)
            Me.GetSubscribersAsync(loginEmail, password, subscription, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubscribersAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscription As String, ByVal status As SubscriberStatus, ByVal userState As Object)
            If (Me.GetSubscribersOperationCompleted Is Nothing) Then
                Me.GetSubscribersOperationCompleted = AddressOf Me.OnGetSubscribersOperationCompleted
            End If
            Me.InvokeAsync("GetSubscribers", New Object() {loginEmail, password, subscription, status}, Me.GetSubscribersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubscribersCompleted(Me, New GetSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createSubscription", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createSubscription(ByVal loginEmail As String, ByVal password As String, ByVal subscriptionName As String, ByVal description As String) As Boolean
            Dim results() As Object = Me.Invoke("createSubscription", New Object() {loginEmail, password, subscriptionName, description})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createSubscriptionAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriptionName As String, ByVal description As String)
            Me.createSubscriptionAsync(loginEmail, password, subscriptionName, description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createSubscriptionAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriptionName As String, ByVal description As String, ByVal userState As Object)
            If (Me.createSubscriptionOperationCompleted Is Nothing) Then
                Me.createSubscriptionOperationCompleted = AddressOf Me.OncreateSubscriptionOperationCompleted
            End If
            Me.InvokeAsync("createSubscription", New Object() {loginEmail, password, subscriptionName, description}, Me.createSubscriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateSubscriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.createSubscriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createSubscriptionCompleted(Me, New createSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createContactList", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createContactList(ByVal loginEmail As String, ByVal password As String, ByVal subscriptionName As String, ByVal description As String) As Boolean
            Dim results() As Object = Me.Invoke("createContactList", New Object() {loginEmail, password, subscriptionName, description})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createContactListAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriptionName As String, ByVal description As String)
            Me.createContactListAsync(loginEmail, password, subscriptionName, description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createContactListAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriptionName As String, ByVal description As String, ByVal userState As Object)
            If (Me.createContactListOperationCompleted Is Nothing) Then
                Me.createContactListOperationCompleted = AddressOf Me.OncreateContactListOperationCompleted
            End If
            Me.InvokeAsync("createContactList", New Object() {loginEmail, password, subscriptionName, description}, Me.createContactListOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateContactListOperationCompleted(ByVal arg As Object)
            If (Not (Me.createContactListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createContactListCompleted(Me, New createContactListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/addSubscriberByEmail", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addSubscriberByEmail(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmail As String, ByVal subscription As String, ByVal optInType As DoubleOptIn) As Boolean
            Dim results() As Object = Me.Invoke("addSubscriberByEmail", New Object() {loginEmail, password, subscriberEmail, subscription, optInType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addSubscriberByEmailAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmail As String, ByVal subscription As String, ByVal optInType As DoubleOptIn)
            Me.addSubscriberByEmailAsync(loginEmail, password, subscriberEmail, subscription, optInType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addSubscriberByEmailAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmail As String, ByVal subscription As String, ByVal optInType As DoubleOptIn, ByVal userState As Object)
            If (Me.addSubscriberByEmailOperationCompleted Is Nothing) Then
                Me.addSubscriberByEmailOperationCompleted = AddressOf Me.OnaddSubscriberByEmailOperationCompleted
            End If
            Me.InvokeAsync("addSubscriberByEmail", New Object() {loginEmail, password, subscriberEmail, subscription, optInType}, Me.addSubscriberByEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddSubscriberByEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.addSubscriberByEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addSubscriberByEmailCompleted(Me, New addSubscriberByEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/DeleteSubscribersFromList", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSubscribersFromList(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmails() As String, ByVal subscription As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteSubscribersFromList", New Object() {loginEmail, password, subscriberEmails, subscription})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscribersFromListAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmails() As String, ByVal subscription As String)
            Me.DeleteSubscribersFromListAsync(loginEmail, password, subscriberEmails, subscription, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscribersFromListAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmails() As String, ByVal subscription As String, ByVal userState As Object)
            If (Me.DeleteSubscribersFromListOperationCompleted Is Nothing) Then
                Me.DeleteSubscribersFromListOperationCompleted = AddressOf Me.OnDeleteSubscribersFromListOperationCompleted
            End If
            Me.InvokeAsync("DeleteSubscribersFromList", New Object() {loginEmail, password, subscriberEmails, subscription}, Me.DeleteSubscribersFromListOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSubscribersFromListOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSubscribersFromListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSubscribersFromListCompleted(Me, New DeleteSubscribersFromListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/DeleteSubscribersFromAccount", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSubscribersFromAccount(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmails() As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteSubscribersFromAccount", New Object() {loginEmail, password, subscriberEmails})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscribersFromAccountAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmails() As String)
            Me.DeleteSubscribersFromAccountAsync(loginEmail, password, subscriberEmails, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscribersFromAccountAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmails() As String, ByVal userState As Object)
            If (Me.DeleteSubscribersFromAccountOperationCompleted Is Nothing) Then
                Me.DeleteSubscribersFromAccountOperationCompleted = AddressOf Me.OnDeleteSubscribersFromAccountOperationCompleted
            End If
            Me.InvokeAsync("DeleteSubscribersFromAccount", New Object() {loginEmail, password, subscriberEmails}, Me.DeleteSubscribersFromAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSubscribersFromAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSubscribersFromAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSubscribersFromAccountCompleted(Me, New DeleteSubscribersFromAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/addSubscriberByInfo", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addSubscriberByInfo(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn) As Boolean
            Dim results() As Object = Me.Invoke("addSubscriberByInfo", New Object() {loginEmail, password, subscriberArgs, subscription, optInType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addSubscriberByInfoAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn)
            Me.addSubscriberByInfoAsync(loginEmail, password, subscriberArgs, subscription, optInType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addSubscriberByInfoAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn, ByVal userState As Object)
            If (Me.addSubscriberByInfoOperationCompleted Is Nothing) Then
                Me.addSubscriberByInfoOperationCompleted = AddressOf Me.OnaddSubscriberByInfoOperationCompleted
            End If
            Me.InvokeAsync("addSubscriberByInfo", New Object() {loginEmail, password, subscriberArgs, subscription, optInType}, Me.addSubscriberByInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddSubscriberByInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.addSubscriberByInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addSubscriberByInfoCompleted(Me, New addSubscriberByInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/addSubscribersByInfo", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addSubscribersByInfo(ByVal loginEmail As String, ByVal password As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByVal subscriberArgs() As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("addSubscribersByInfo", New Object() {loginEmail, password, subscriberArgs, subscription, optInType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addSubscribersByInfoAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs() As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn)
            Me.addSubscribersByInfoAsync(loginEmail, password, subscriberArgs, subscription, optInType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addSubscribersByInfoAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs() As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn, ByVal userState As Object)
            If (Me.addSubscribersByInfoOperationCompleted Is Nothing) Then
                Me.addSubscribersByInfoOperationCompleted = AddressOf Me.OnaddSubscribersByInfoOperationCompleted
            End If
            Me.InvokeAsync("addSubscribersByInfo", New Object() {loginEmail, password, subscriberArgs, subscription, optInType}, Me.addSubscribersByInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddSubscribersByInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.addSubscribersByInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addSubscribersByInfoCompleted(Me, New addSubscribersByInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/addSubscribersByInfo2", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addSubscribersByInfo2(ByVal loginEmail As String, ByVal password As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByVal subscriberArgs() As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn) As ResponseResult
            Dim results() As Object = Me.Invoke("addSubscribersByInfo2", New Object() {loginEmail, password, subscriberArgs, subscription, optInType})
            Return CType(results(0),ResponseResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addSubscribersByInfo2Async(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs() As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn)
            Me.addSubscribersByInfo2Async(loginEmail, password, subscriberArgs, subscription, optInType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addSubscribersByInfo2Async(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs() As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn, ByVal userState As Object)
            If (Me.addSubscribersByInfo2OperationCompleted Is Nothing) Then
                Me.addSubscribersByInfo2OperationCompleted = AddressOf Me.OnaddSubscribersByInfo2OperationCompleted
            End If
            Me.InvokeAsync("addSubscribersByInfo2", New Object() {loginEmail, password, subscriberArgs, subscription, optInType}, Me.addSubscribersByInfo2OperationCompleted, userState)
        End Sub
        
        Private Sub OnaddSubscribersByInfo2OperationCompleted(ByVal arg As Object)
            If (Not (Me.addSubscribersByInfo2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addSubscribersByInfo2Completed(Me, New addSubscribersByInfo2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/Send2", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Send2(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String) As String
            Dim results() As Object = Me.Invoke("Send2", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], Subject, Body})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Send2Async(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String)
            Me.Send2Async(LoginEmail, Password, CampaignName, From, FromName, [To], Subject, Body, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Send2Async(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String, ByVal userState As Object)
            If (Me.Send2OperationCompleted Is Nothing) Then
                Me.Send2OperationCompleted = AddressOf Me.OnSend2OperationCompleted
            End If
            Me.InvokeAsync("Send2", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], Subject, Body}, Me.Send2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSend2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Send2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Send2Completed(Me, New Send2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/Send3", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Send3(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String) As String
            Dim results() As Object = Me.Invoke("Send3", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Send3Async(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String)
            Me.Send3Async(LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Send3Async(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String, ByVal userState As Object)
            If (Me.Send3OperationCompleted Is Nothing) Then
                Me.Send3OperationCompleted = AddressOf Me.OnSend3OperationCompleted
            End If
            Me.InvokeAsync("Send3", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body}, Me.Send3OperationCompleted, userState)
        End Sub
        
        Private Sub OnSend3OperationCompleted(ByVal arg As Object)
            If (Not (Me.Send3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Send3Completed(Me, New Send3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SendmultipleAttachment", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendmultipleAttachment() As String
            Dim results() As Object = Me.Invoke("SendmultipleAttachment", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendmultipleAttachmentAsync()
            Me.SendmultipleAttachmentAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendmultipleAttachmentAsync(ByVal userState As Object)
            If (Me.SendmultipleAttachmentOperationCompleted Is Nothing) Then
                Me.SendmultipleAttachmentOperationCompleted = AddressOf Me.OnSendmultipleAttachmentOperationCompleted
            End If
            Me.InvokeAsync("SendmultipleAttachment", New Object(-1) {}, Me.SendmultipleAttachmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendmultipleAttachmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendmultipleAttachmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendmultipleAttachmentCompleted(Me, New SendmultipleAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SendMTREmail", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendMTREmail() As String
            Dim results() As Object = Me.Invoke("SendMTREmail", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendMTREmailAsync()
            Me.SendMTREmailAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendMTREmailAsync(ByVal userState As Object)
            If (Me.SendMTREmailOperationCompleted Is Nothing) Then
                Me.SendMTREmailOperationCompleted = AddressOf Me.OnSendMTREmailOperationCompleted
            End If
            Me.InvokeAsync("SendMTREmail", New Object(-1) {}, Me.SendMTREmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendMTREmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendMTREmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendMTREmailCompleted(Me, New SendMTREmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SendWithAttachment", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendWithAttachment(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByVal files() As CampaignAttachment) As String
            Dim results() As Object = Me.Invoke("SendWithAttachment", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body, files})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendWithAttachmentAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String, ByVal files() As CampaignAttachment)
            Me.SendWithAttachmentAsync(LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body, files, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendWithAttachmentAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String, ByVal files() As CampaignAttachment, ByVal userState As Object)
            If (Me.SendWithAttachmentOperationCompleted Is Nothing) Then
                Me.SendWithAttachmentOperationCompleted = AddressOf Me.OnSendWithAttachmentOperationCompleted
            End If
            Me.InvokeAsync("SendWithAttachment", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body, files}, Me.SendWithAttachmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendWithAttachmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendWithAttachmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendWithAttachmentCompleted(Me, New SendWithAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SendSimpleAttachment", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendSimpleAttachment(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Attachment() As Byte, ByVal AttachmentName As String) As String
            Dim results() As Object = Me.Invoke("SendSimpleAttachment", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body, Attachment, AttachmentName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendSimpleAttachmentAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String, ByVal Attachment() As Byte, ByVal AttachmentName As String)
            Me.SendSimpleAttachmentAsync(LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body, Attachment, AttachmentName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendSimpleAttachmentAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String, ByVal Attachment() As Byte, ByVal AttachmentName As String, ByVal userState As Object)
            If (Me.SendSimpleAttachmentOperationCompleted Is Nothing) Then
                Me.SendSimpleAttachmentOperationCompleted = AddressOf Me.OnSendSimpleAttachmentOperationCompleted
            End If
            Me.InvokeAsync("SendSimpleAttachment", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body, Attachment, AttachmentName}, Me.SendSimpleAttachmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendSimpleAttachmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendSimpleAttachmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendSimpleAttachmentCompleted(Me, New SendSimpleAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/EmailSend", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EmailSend(ByVal LoginEmail As String, ByVal Password As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String) As String
            Dim results() As Object = Me.Invoke("EmailSend", New Object() {LoginEmail, Password, From, FromName, [To], Subject, Body})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EmailSendAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String)
            Me.EmailSendAsync(LoginEmail, Password, From, FromName, [To], Subject, Body, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EmailSendAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String, ByVal userState As Object)
            If (Me.EmailSendOperationCompleted Is Nothing) Then
                Me.EmailSendOperationCompleted = AddressOf Me.OnEmailSendOperationCompleted
            End If
            Me.InvokeAsync("EmailSend", New Object() {LoginEmail, Password, From, FromName, [To], Subject, Body}, Me.EmailSendOperationCompleted, userState)
        End Sub
        
        Private Sub OnEmailSendOperationCompleted(ByVal arg As Object)
            If (Not (Me.EmailSendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EmailSendCompleted(Me, New EmailSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/UpdateMemberEmail", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMemberEmail(ByVal LoginEmail As String, ByVal APIKey As String, ByVal MemberId As String, ByVal Email As String) As String
            Dim results() As Object = Me.Invoke("UpdateMemberEmail", New Object() {LoginEmail, APIKey, MemberId, Email})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMemberEmailAsync(ByVal LoginEmail As String, ByVal APIKey As String, ByVal MemberId As String, ByVal Email As String)
            Me.UpdateMemberEmailAsync(LoginEmail, APIKey, MemberId, Email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMemberEmailAsync(ByVal LoginEmail As String, ByVal APIKey As String, ByVal MemberId As String, ByVal Email As String, ByVal userState As Object)
            If (Me.UpdateMemberEmailOperationCompleted Is Nothing) Then
                Me.UpdateMemberEmailOperationCompleted = AddressOf Me.OnUpdateMemberEmailOperationCompleted
            End If
            Me.InvokeAsync("UpdateMemberEmail", New Object() {LoginEmail, APIKey, MemberId, Email}, Me.UpdateMemberEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMemberEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMemberEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMemberEmailCompleted(Me, New UpdateMemberEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SendTemplateEmail", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendTemplateEmail(ByVal LoginEmail As String, ByVal APIKey As String, ByVal MemberId As String, ByVal Email As String, ByVal TemplateId As String, ByVal SubstitutionVars As String, ByVal CreativeLanguage As String) As String
            Dim results() As Object = Me.Invoke("SendTemplateEmail", New Object() {LoginEmail, APIKey, MemberId, Email, TemplateId, SubstitutionVars, CreativeLanguage})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendTemplateEmailAsync(ByVal LoginEmail As String, ByVal APIKey As String, ByVal MemberId As String, ByVal Email As String, ByVal TemplateId As String, ByVal SubstitutionVars As String, ByVal CreativeLanguage As String)
            Me.SendTemplateEmailAsync(LoginEmail, APIKey, MemberId, Email, TemplateId, SubstitutionVars, CreativeLanguage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendTemplateEmailAsync(ByVal LoginEmail As String, ByVal APIKey As String, ByVal MemberId As String, ByVal Email As String, ByVal TemplateId As String, ByVal SubstitutionVars As String, ByVal CreativeLanguage As String, ByVal userState As Object)
            If (Me.SendTemplateEmailOperationCompleted Is Nothing) Then
                Me.SendTemplateEmailOperationCompleted = AddressOf Me.OnSendTemplateEmailOperationCompleted
            End If
            Me.InvokeAsync("SendTemplateEmail", New Object() {LoginEmail, APIKey, MemberId, Email, TemplateId, SubstitutionVars, CreativeLanguage}, Me.SendTemplateEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendTemplateEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendTemplateEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendTemplateEmailCompleted(Me, New SendTemplateEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/Send", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Send(ByVal LoginEmail As String, ByVal Password As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String) As String
            Dim results() As Object = Me.Invoke("Send", New Object() {LoginEmail, Password, From, FromName, [To], Subject, Body})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String)
            Me.SendAsync(LoginEmail, Password, From, FromName, [To], Subject, Body, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String, ByVal userState As Object)
            If (Me.SendOperationCompleted Is Nothing) Then
                Me.SendOperationCompleted = AddressOf Me.OnSendOperationCompleted
            End If
            Me.InvokeAsync("Send", New Object() {LoginEmail, Password, From, FromName, [To], Subject, Body}, Me.SendOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendCompleted(Me, New SendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SendAndCc", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendAndCc(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String, ByVal Cc() As String) As String
            Dim results() As Object = Me.Invoke("SendAndCc", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], Subject, Body, Cc})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendAndCcAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String, ByVal Cc() As String)
            Me.SendAndCcAsync(LoginEmail, Password, CampaignName, From, FromName, [To], Subject, Body, Cc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendAndCcAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String, ByVal Cc() As String, ByVal userState As Object)
            If (Me.SendAndCcOperationCompleted Is Nothing) Then
                Me.SendAndCcOperationCompleted = AddressOf Me.OnSendAndCcOperationCompleted
            End If
            Me.InvokeAsync("SendAndCc", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], Subject, Body, Cc}, Me.SendAndCcOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendAndCcOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendAndCcCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendAndCcCompleted(Me, New SendAndCcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetEmailStatus", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmailStatus(ByVal LoginEmail As String, ByVal Password As String, ByVal EmailIds As String) As String()
            Dim results() As Object = Me.Invoke("GetEmailStatus", New Object() {LoginEmail, Password, EmailIds})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmailStatusAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal EmailIds As String)
            Me.GetEmailStatusAsync(LoginEmail, Password, EmailIds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmailStatusAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal EmailIds As String, ByVal userState As Object)
            If (Me.GetEmailStatusOperationCompleted Is Nothing) Then
                Me.GetEmailStatusOperationCompleted = AddressOf Me.OnGetEmailStatusOperationCompleted
            End If
            Me.InvokeAsync("GetEmailStatus", New Object() {LoginEmail, Password, EmailIds}, Me.GetEmailStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmailStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmailStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmailStatusCompleted(Me, New GetEmailStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetSMSStatus", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMSStatus(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignId As String) As String()
            Dim results() As Object = Me.Invoke("GetSMSStatus", New Object() {LoginEmail, Password, CampaignId})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMSStatusAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignId As String)
            Me.GetSMSStatusAsync(LoginEmail, Password, CampaignId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMSStatusAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignId As String, ByVal userState As Object)
            If (Me.GetSMSStatusOperationCompleted Is Nothing) Then
                Me.GetSMSStatusOperationCompleted = AddressOf Me.OnGetSMSStatusOperationCompleted
            End If
            Me.InvokeAsync("GetSMSStatus", New Object() {LoginEmail, Password, CampaignId}, Me.GetSMSStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMSStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMSStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMSStatusCompleted(Me, New GetSMSStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/HelloWorld", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(-1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloWorldCompleted(Me, New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignsSend2TalkkingUser", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignsSend2TalkkingUser(ByVal startTime As String, ByVal endTime As String, ByVal talkKingUserId As String, ByVal APIKey As String) As String
            Dim results() As Object = Me.Invoke("GetCampaignsSend2TalkkingUser", New Object() {startTime, endTime, talkKingUserId, APIKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignsSend2TalkkingUserAsync(ByVal startTime As String, ByVal endTime As String, ByVal talkKingUserId As String, ByVal APIKey As String)
            Me.GetCampaignsSend2TalkkingUserAsync(startTime, endTime, talkKingUserId, APIKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignsSend2TalkkingUserAsync(ByVal startTime As String, ByVal endTime As String, ByVal talkKingUserId As String, ByVal APIKey As String, ByVal userState As Object)
            If (Me.GetCampaignsSend2TalkkingUserOperationCompleted Is Nothing) Then
                Me.GetCampaignsSend2TalkkingUserOperationCompleted = AddressOf Me.OnGetCampaignsSend2TalkkingUserOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignsSend2TalkkingUser", New Object() {startTime, endTime, talkKingUserId, APIKey}, Me.GetCampaignsSend2TalkkingUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignsSend2TalkkingUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignsSend2TalkkingUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignsSend2TalkkingUserCompleted(Me, New GetCampaignsSend2TalkkingUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SendBatch", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendBatch(ByVal xml As String) As server
            Dim results() As Object = Me.Invoke("SendBatch", New Object() {xml})
            Return CType(results(0),server)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendBatchAsync(ByVal xml As String)
            Me.SendBatchAsync(xml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendBatchAsync(ByVal xml As String, ByVal userState As Object)
            If (Me.SendBatchOperationCompleted Is Nothing) Then
                Me.SendBatchOperationCompleted = AddressOf Me.OnSendBatchOperationCompleted
            End If
            Me.InvokeAsync("SendBatch", New Object() {xml}, Me.SendBatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendBatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendBatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendBatchCompleted(Me, New SendBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SearchContacts", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SearchContacts(ByVal LoginEmail As String, ByVal Password As String, ByVal Criteria As String, ByVal TopN As Integer, ByVal SaveAsList As String, ByVal ForceCreate As Boolean) As Integer
            Dim results() As Object = Me.Invoke("SearchContacts", New Object() {LoginEmail, Password, Criteria, TopN, SaveAsList, ForceCreate})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SearchContactsAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal Criteria As String, ByVal TopN As Integer, ByVal SaveAsList As String, ByVal ForceCreate As Boolean)
            Me.SearchContactsAsync(LoginEmail, Password, Criteria, TopN, SaveAsList, ForceCreate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SearchContactsAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal Criteria As String, ByVal TopN As Integer, ByVal SaveAsList As String, ByVal ForceCreate As Boolean, ByVal userState As Object)
            If (Me.SearchContactsOperationCompleted Is Nothing) Then
                Me.SearchContactsOperationCompleted = AddressOf Me.OnSearchContactsOperationCompleted
            End If
            Me.InvokeAsync("SearchContacts", New Object() {LoginEmail, Password, Criteria, TopN, SaveAsList, ForceCreate}, Me.SearchContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSearchContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SearchContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SearchContactsCompleted(Me, New SearchContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SplitContacts", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SplitContacts(ByVal LoginEmail As String, ByVal Password As String, ByVal oldListName As String, ByVal SaveAsList As String) As Boolean
            Dim results() As Object = Me.Invoke("SplitContacts", New Object() {LoginEmail, Password, oldListName, SaveAsList})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SplitContactsAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal oldListName As String, ByVal SaveAsList As String)
            Me.SplitContactsAsync(LoginEmail, Password, oldListName, SaveAsList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SplitContactsAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal oldListName As String, ByVal SaveAsList As String, ByVal userState As Object)
            If (Me.SplitContactsOperationCompleted Is Nothing) Then
                Me.SplitContactsOperationCompleted = AddressOf Me.OnSplitContactsOperationCompleted
            End If
            Me.InvokeAsync("SplitContacts", New Object() {LoginEmail, Password, oldListName, SaveAsList}, Me.SplitContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSplitContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SplitContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SplitContactsCompleted(Me, New SplitContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/ExcludeContactList", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExcludeContactList(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal ExcludeLists As String) As Integer
            Dim results() As Object = Me.Invoke("ExcludeContactList", New Object() {LoginEmail, Password, CampaignName, ExcludeLists})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExcludeContactListAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal ExcludeLists As String)
            Me.ExcludeContactListAsync(LoginEmail, Password, CampaignName, ExcludeLists, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExcludeContactListAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal ExcludeLists As String, ByVal userState As Object)
            If (Me.ExcludeContactListOperationCompleted Is Nothing) Then
                Me.ExcludeContactListOperationCompleted = AddressOf Me.OnExcludeContactListOperationCompleted
            End If
            Me.InvokeAsync("ExcludeContactList", New Object() {LoginEmail, Password, CampaignName, ExcludeLists}, Me.ExcludeContactListOperationCompleted, userState)
        End Sub
        
        Private Sub OnExcludeContactListOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcludeContactListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcludeContactListCompleted(Me, New ExcludeContactListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignDetailReport", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignDetailReport(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal subscriberEmail As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignDetailReport", New Object() {loginEmail, password, campaignID, subscriberEmail})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignDetailReportAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal subscriberEmail As String)
            Me.GetCampaignDetailReportAsync(loginEmail, password, campaignID, subscriberEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignDetailReportAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal subscriberEmail As String, ByVal userState As Object)
            If (Me.GetCampaignDetailReportOperationCompleted Is Nothing) Then
                Me.GetCampaignDetailReportOperationCompleted = AddressOf Me.OnGetCampaignDetailReportOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignDetailReport", New Object() {loginEmail, password, campaignID, subscriberEmail}, Me.GetCampaignDetailReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignDetailReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignDetailReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignDetailReportCompleted(Me, New GetCampaignDetailReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignSents", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignSents(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignSents", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignSentsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignSentsAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignSentsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignSentsOperationCompleted Is Nothing) Then
                Me.GetCampaignSentsOperationCompleted = AddressOf Me.OnGetCampaignSentsOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignSents", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignSentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignSentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignSentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignSentsCompleted(Me, New GetCampaignSentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignOpens", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignOpens(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignOpens", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignOpensAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignOpensAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignOpensAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignOpensOperationCompleted Is Nothing) Then
                Me.GetCampaignOpensOperationCompleted = AddressOf Me.OnGetCampaignOpensOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignOpens", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignOpensOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignOpensOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignOpensCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignOpensCompleted(Me, New GetCampaignOpensCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignOpensJson", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignOpensJson(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As String
            Dim results() As Object = Me.Invoke("GetCampaignOpensJson", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignOpensJsonAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignOpensJsonAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignOpensJsonAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignOpensJsonOperationCompleted Is Nothing) Then
                Me.GetCampaignOpensJsonOperationCompleted = AddressOf Me.OnGetCampaignOpensJsonOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignOpensJson", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignOpensJsonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignOpensJsonOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignOpensJsonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignOpensJsonCompleted(Me, New GetCampaignOpensJsonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignOpensWithName", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignOpensWithName(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignOpensWithName", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignOpensWithNameAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignOpensWithNameAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignOpensWithNameAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignOpensWithNameOperationCompleted Is Nothing) Then
                Me.GetCampaignOpensWithNameOperationCompleted = AddressOf Me.OnGetCampaignOpensWithNameOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignOpensWithName", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignOpensWithNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignOpensWithNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignOpensWithNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignOpensWithNameCompleted(Me, New GetCampaignOpensWithNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignClicks", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignClicks(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignClicks", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignClicksAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignClicksAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignClicksAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignClicksOperationCompleted Is Nothing) Then
                Me.GetCampaignClicksOperationCompleted = AddressOf Me.OnGetCampaignClicksOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignClicks", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignClicksOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignClicksOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignClicksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignClicksCompleted(Me, New GetCampaignClicksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignClicksWithName", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignClicksWithName(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignClicksWithName", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignClicksWithNameAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignClicksWithNameAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignClicksWithNameAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignClicksWithNameOperationCompleted Is Nothing) Then
                Me.GetCampaignClicksWithNameOperationCompleted = AddressOf Me.OnGetCampaignClicksWithNameOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignClicksWithName", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignClicksWithNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignClicksWithNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignClicksWithNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignClicksWithNameCompleted(Me, New GetCampaignClicksWithNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignUnsubscribes", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignUnsubscribes(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignUnsubscribes", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignUnsubscribesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignUnsubscribesAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignUnsubscribesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignUnsubscribesOperationCompleted Is Nothing) Then
                Me.GetCampaignUnsubscribesOperationCompleted = AddressOf Me.OnGetCampaignUnsubscribesOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignUnsubscribes", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignUnsubscribesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignUnsubscribesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignUnsubscribesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignUnsubscribesCompleted(Me, New GetCampaignUnsubscribesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetAccountUnsubscribes", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountUnsubscribes(ByVal loginEmail As String, ByVal password As String, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAccountUnsubscribes", New Object() {loginEmail, password, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountUnsubscribesAsync(ByVal loginEmail As String, ByVal password As String, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetAccountUnsubscribesAsync(loginEmail, password, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountUnsubscribesAsync(ByVal loginEmail As String, ByVal password As String, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetAccountUnsubscribesOperationCompleted Is Nothing) Then
                Me.GetAccountUnsubscribesOperationCompleted = AddressOf Me.OnGetAccountUnsubscribesOperationCompleted
            End If
            Me.InvokeAsync("GetAccountUnsubscribes", New Object() {loginEmail, password, startDate, endDate}, Me.GetAccountUnsubscribesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountUnsubscribesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountUnsubscribesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountUnsubscribesCompleted(Me, New GetAccountUnsubscribesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetAccountUnsubscribesToFtp", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountUnsubscribesToFtp(ByVal loginEmail As String, ByVal password As String, ByVal startDate As Date, ByVal endDate As Date) As String
            Dim results() As Object = Me.Invoke("GetAccountUnsubscribesToFtp", New Object() {loginEmail, password, startDate, endDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountUnsubscribesToFtpAsync(ByVal loginEmail As String, ByVal password As String, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetAccountUnsubscribesToFtpAsync(loginEmail, password, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountUnsubscribesToFtpAsync(ByVal loginEmail As String, ByVal password As String, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetAccountUnsubscribesToFtpOperationCompleted Is Nothing) Then
                Me.GetAccountUnsubscribesToFtpOperationCompleted = AddressOf Me.OnGetAccountUnsubscribesToFtpOperationCompleted
            End If
            Me.InvokeAsync("GetAccountUnsubscribesToFtp", New Object() {loginEmail, password, startDate, endDate}, Me.GetAccountUnsubscribesToFtpOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountUnsubscribesToFtpOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountUnsubscribesToFtpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountUnsubscribesToFtpCompleted(Me, New GetAccountUnsubscribesToFtpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignAbuses", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignAbuses(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignAbuses", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignAbusesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignAbusesAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignAbusesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignAbusesOperationCompleted Is Nothing) Then
                Me.GetCampaignAbusesOperationCompleted = AddressOf Me.OnGetCampaignAbusesOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignAbuses", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignAbusesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignAbusesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignAbusesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignAbusesCompleted(Me, New GetCampaignAbusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignConversions", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignConversions(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignConversions", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignConversionsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignConversionsAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignConversionsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignConversionsOperationCompleted Is Nothing) Then
                Me.GetCampaignConversionsOperationCompleted = AddressOf Me.OnGetCampaignConversionsOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignConversions", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignConversionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignConversionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignConversionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignConversionsCompleted(Me, New GetCampaignConversionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignConvertions", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignConvertions(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignConvertions", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignConvertionsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignConvertionsAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignConvertionsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignConvertionsOperationCompleted Is Nothing) Then
                Me.GetCampaignConvertionsOperationCompleted = AddressOf Me.OnGetCampaignConvertionsOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignConvertions", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignConvertionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignConvertionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignConvertionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignConvertionsCompleted(Me, New GetCampaignConvertionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignBounces", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignBounces(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignBounces", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignBouncesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignBouncesAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignBouncesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignBouncesOperationCompleted Is Nothing) Then
                Me.GetCampaignBouncesOperationCompleted = AddressOf Me.OnGetCampaignBouncesOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignBounces", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignBouncesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignBouncesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignBouncesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignBouncesCompleted(Me, New GetCampaignBouncesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/AddSenderEmail", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSenderEmail(ByVal loginEmail As String, ByVal password As String, ByVal SenderEmail As String) As Boolean
            Dim results() As Object = Me.Invoke("AddSenderEmail", New Object() {loginEmail, password, SenderEmail})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSenderEmailAsync(ByVal loginEmail As String, ByVal password As String, ByVal SenderEmail As String)
            Me.AddSenderEmailAsync(loginEmail, password, SenderEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSenderEmailAsync(ByVal loginEmail As String, ByVal password As String, ByVal SenderEmail As String, ByVal userState As Object)
            If (Me.AddSenderEmailOperationCompleted Is Nothing) Then
                Me.AddSenderEmailOperationCompleted = AddressOf Me.OnAddSenderEmailOperationCompleted
            End If
            Me.InvokeAsync("AddSenderEmail", New Object() {loginEmail, password, SenderEmail}, Me.AddSenderEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSenderEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSenderEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSenderEmailCompleted(Me, New AddSenderEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/AddOrUpdateWebhook", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddOrUpdateWebhook(ByVal loginEmail As String, ByVal password As String, ByVal url As String, ByVal eventtype As EventType, ByVal enable As Boolean) As String
            Dim results() As Object = Me.Invoke("AddOrUpdateWebhook", New Object() {loginEmail, password, url, eventtype, enable})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddOrUpdateWebhookAsync(ByVal loginEmail As String, ByVal password As String, ByVal url As String, ByVal eventtype As EventType, ByVal enable As Boolean)
            Me.AddOrUpdateWebhookAsync(loginEmail, password, url, eventtype, enable, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddOrUpdateWebhookAsync(ByVal loginEmail As String, ByVal password As String, ByVal url As String, ByVal eventtype As EventType, ByVal enable As Boolean, ByVal userState As Object)
            If (Me.AddOrUpdateWebhookOperationCompleted Is Nothing) Then
                Me.AddOrUpdateWebhookOperationCompleted = AddressOf Me.OnAddOrUpdateWebhookOperationCompleted
            End If
            Me.InvokeAsync("AddOrUpdateWebhook", New Object() {loginEmail, password, url, eventtype, enable}, Me.AddOrUpdateWebhookOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOrUpdateWebhookOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddOrUpdateWebhookCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddOrUpdateWebhookCompleted(Me, New AddOrUpdateWebhookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/CreateNewAccount", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateNewAccount(ByVal loginEmail As String, ByVal loginPassword As String, ByVal newAccountName As String, ByVal newAccountEmail As String, ByVal newAccountPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateNewAccount", New Object() {loginEmail, loginPassword, newAccountName, newAccountEmail, newAccountPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateNewAccountAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal newAccountName As String, ByVal newAccountEmail As String, ByVal newAccountPassword As String)
            Me.CreateNewAccountAsync(loginEmail, loginPassword, newAccountName, newAccountEmail, newAccountPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateNewAccountAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal newAccountName As String, ByVal newAccountEmail As String, ByVal newAccountPassword As String, ByVal userState As Object)
            If (Me.CreateNewAccountOperationCompleted Is Nothing) Then
                Me.CreateNewAccountOperationCompleted = AddressOf Me.OnCreateNewAccountOperationCompleted
            End If
            Me.InvokeAsync("CreateNewAccount", New Object() {loginEmail, loginPassword, newAccountName, newAccountEmail, newAccountPassword}, Me.CreateNewAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateNewAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateNewAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateNewAccountCompleted(Me, New CreateNewAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/TransferCredit", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TransferCredit(ByVal loginEmail As String, ByVal loginPassword As String, ByVal transferToEmail As String, ByVal creditCount As Integer) As Boolean
            Dim results() As Object = Me.Invoke("TransferCredit", New Object() {loginEmail, loginPassword, transferToEmail, creditCount})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TransferCreditAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal transferToEmail As String, ByVal creditCount As Integer)
            Me.TransferCreditAsync(loginEmail, loginPassword, transferToEmail, creditCount, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TransferCreditAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal transferToEmail As String, ByVal creditCount As Integer, ByVal userState As Object)
            If (Me.TransferCreditOperationCompleted Is Nothing) Then
                Me.TransferCreditOperationCompleted = AddressOf Me.OnTransferCreditOperationCompleted
            End If
            Me.InvokeAsync("TransferCredit", New Object() {loginEmail, loginPassword, transferToEmail, creditCount}, Me.TransferCreditOperationCompleted, userState)
        End Sub
        
        Private Sub OnTransferCreditOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransferCreditCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransferCreditCompleted(Me, New TransferCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/UplodeZipFile", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UplodeZipFile(ByVal loginEmail As String, ByVal loginPassword As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal fileStream() As Byte, ByVal campaignId As Integer) As Boolean
            Dim results() As Object = Me.Invoke("UplodeZipFile", New Object() {loginEmail, loginPassword, fileStream, campaignId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UplodeZipFileAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileStream() As Byte, ByVal campaignId As Integer)
            Me.UplodeZipFileAsync(loginEmail, loginPassword, fileStream, campaignId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UplodeZipFileAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileStream() As Byte, ByVal campaignId As Integer, ByVal userState As Object)
            If (Me.UplodeZipFileOperationCompleted Is Nothing) Then
                Me.UplodeZipFileOperationCompleted = AddressOf Me.OnUplodeZipFileOperationCompleted
            End If
            Me.InvokeAsync("UplodeZipFile", New Object() {loginEmail, loginPassword, fileStream, campaignId}, Me.UplodeZipFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUplodeZipFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UplodeZipFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UplodeZipFileCompleted(Me, New UplodeZipFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/UploadContactListFile", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadContactListFile(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileType As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal myFileStream() As Byte, ByVal ContactListName As String) As String
            Dim results() As Object = Me.Invoke("UploadContactListFile", New Object() {loginEmail, loginPassword, fileType, myFileStream, ContactListName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadContactListFileAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileType As String, ByVal myFileStream() As Byte, ByVal ContactListName As String)
            Me.UploadContactListFileAsync(loginEmail, loginPassword, fileType, myFileStream, ContactListName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadContactListFileAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileType As String, ByVal myFileStream() As Byte, ByVal ContactListName As String, ByVal userState As Object)
            If (Me.UploadContactListFileOperationCompleted Is Nothing) Then
                Me.UploadContactListFileOperationCompleted = AddressOf Me.OnUploadContactListFileOperationCompleted
            End If
            Me.InvokeAsync("UploadContactListFile", New Object() {loginEmail, loginPassword, fileType, myFileStream, ContactListName}, Me.UploadContactListFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadContactListFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadContactListFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadContactListFileCompleted(Me, New UploadContactListFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/ActivationCampaignByFtpFile", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ActivationCampaignByFtpFile(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileType As String, ByVal contactListName As String, ByVal campaignId As Integer, ByVal ftpIp As String, ByVal ftpUser As String, ByVal ftpPassword As String, ByVal ftpFilePath As String) As String
            Dim results() As Object = Me.Invoke("ActivationCampaignByFtpFile", New Object() {loginEmail, loginPassword, fileType, contactListName, campaignId, ftpIp, ftpUser, ftpPassword, ftpFilePath})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ActivationCampaignByFtpFileAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileType As String, ByVal contactListName As String, ByVal campaignId As Integer, ByVal ftpIp As String, ByVal ftpUser As String, ByVal ftpPassword As String, ByVal ftpFilePath As String)
            Me.ActivationCampaignByFtpFileAsync(loginEmail, loginPassword, fileType, contactListName, campaignId, ftpIp, ftpUser, ftpPassword, ftpFilePath, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ActivationCampaignByFtpFileAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileType As String, ByVal contactListName As String, ByVal campaignId As Integer, ByVal ftpIp As String, ByVal ftpUser As String, ByVal ftpPassword As String, ByVal ftpFilePath As String, ByVal userState As Object)
            If (Me.ActivationCampaignByFtpFileOperationCompleted Is Nothing) Then
                Me.ActivationCampaignByFtpFileOperationCompleted = AddressOf Me.OnActivationCampaignByFtpFileOperationCompleted
            End If
            Me.InvokeAsync("ActivationCampaignByFtpFile", New Object() {loginEmail, loginPassword, fileType, contactListName, campaignId, ftpIp, ftpUser, ftpPassword, ftpFilePath}, Me.ActivationCampaignByFtpFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnActivationCampaignByFtpFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.ActivationCampaignByFtpFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ActivationCampaignByFtpFileCompleted(Me, New ActivationCampaignByFtpFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/NameExists", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NameExists(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountName As String) As Boolean
            Dim results() As Object = Me.Invoke("NameExists", New Object() {loginEmail, APIKey, accountName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NameExistsAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountName As String)
            Me.NameExistsAsync(loginEmail, APIKey, accountName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NameExistsAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountName As String, ByVal userState As Object)
            If (Me.NameExistsOperationCompleted Is Nothing) Then
                Me.NameExistsOperationCompleted = AddressOf Me.OnNameExistsOperationCompleted
            End If
            Me.InvokeAsync("NameExists", New Object() {loginEmail, APIKey, accountName}, Me.NameExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnNameExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.NameExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NameExistsCompleted(Me, New NameExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/EmailExists", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EmailExists(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountEmail As String) As Boolean
            Dim results() As Object = Me.Invoke("EmailExists", New Object() {loginEmail, APIKey, accountEmail})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EmailExistsAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountEmail As String)
            Me.EmailExistsAsync(loginEmail, APIKey, accountEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EmailExistsAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountEmail As String, ByVal userState As Object)
            If (Me.EmailExistsOperationCompleted Is Nothing) Then
                Me.EmailExistsOperationCompleted = AddressOf Me.OnEmailExistsOperationCompleted
            End If
            Me.InvokeAsync("EmailExists", New Object() {loginEmail, APIKey, accountEmail}, Me.EmailExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnEmailExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.EmailExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EmailExistsCompleted(Me, New EmailExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getCampaignID", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCampaignID(ByVal loginEmail As String, ByVal APIKey As String, ByVal CampaignName As String) As Integer
            Dim results() As Object = Me.Invoke("getCampaignID", New Object() {loginEmail, APIKey, CampaignName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignIDAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal CampaignName As String)
            Me.getCampaignIDAsync(loginEmail, APIKey, CampaignName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignIDAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal CampaignName As String, ByVal userState As Object)
            If (Me.getCampaignIDOperationCompleted Is Nothing) Then
                Me.getCampaignIDOperationCompleted = AddressOf Me.OngetCampaignIDOperationCompleted
            End If
            Me.InvokeAsync("getCampaignID", New Object() {loginEmail, APIKey, CampaignName}, Me.getCampaignIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignIDCompleted(Me, New getCampaignIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetAccessToken", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccessToken(ByVal loginEmail As String, ByVal APIKey As String) As String
            Dim results() As Object = Me.Invoke("GetAccessToken", New Object() {loginEmail, APIKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccessTokenAsync(ByVal loginEmail As String, ByVal APIKey As String)
            Me.GetAccessTokenAsync(loginEmail, APIKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccessTokenAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal userState As Object)
            If (Me.GetAccessTokenOperationCompleted Is Nothing) Then
                Me.GetAccessTokenOperationCompleted = AddressOf Me.OnGetAccessTokenOperationCompleted
            End If
            Me.InvokeAsync("GetAccessToken", New Object() {loginEmail, APIKey}, Me.GetAccessTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccessTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccessTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccessTokenCompleted(Me, New GetAccessTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/VerifyAccessToken", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function VerifyAccessToken(ByVal emailAddress As String, ByVal token As String) As Boolean
            Dim results() As Object = Me.Invoke("VerifyAccessToken", New Object() {emailAddress, token})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VerifyAccessTokenAsync(ByVal emailAddress As String, ByVal token As String)
            Me.VerifyAccessTokenAsync(emailAddress, token, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VerifyAccessTokenAsync(ByVal emailAddress As String, ByVal token As String, ByVal userState As Object)
            If (Me.VerifyAccessTokenOperationCompleted Is Nothing) Then
                Me.VerifyAccessTokenOperationCompleted = AddressOf Me.OnVerifyAccessTokenOperationCompleted
            End If
            Me.InvokeAsync("VerifyAccessToken", New Object() {emailAddress, token}, Me.VerifyAccessTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnVerifyAccessTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.VerifyAccessTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VerifyAccessTokenCompleted(Me, New VerifyAccessTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetAPIKey", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAPIKey(ByVal loginEmail As String, ByVal loginPassword As String) As String
            Dim results() As Object = Me.Invoke("GetAPIKey", New Object() {loginEmail, loginPassword})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAPIKeyAsync(ByVal loginEmail As String, ByVal loginPassword As String)
            Me.GetAPIKeyAsync(loginEmail, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAPIKeyAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.GetAPIKeyOperationCompleted Is Nothing) Then
                Me.GetAPIKeyOperationCompleted = AddressOf Me.OnGetAPIKeyOperationCompleted
            End If
            Me.InvokeAsync("GetAPIKey", New Object() {loginEmail, loginPassword}, Me.GetAPIKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAPIKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAPIKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAPIKeyCompleted(Me, New GetAPIKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetAccountInfo", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountInfo(ByVal loginEmail As String, ByVal loginPassword As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAccountInfo", New Object() {loginEmail, loginPassword})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountInfoAsync(ByVal loginEmail As String, ByVal loginPassword As String)
            Me.GetAccountInfoAsync(loginEmail, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountInfoAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.GetAccountInfoOperationCompleted Is Nothing) Then
                Me.GetAccountInfoOperationCompleted = AddressOf Me.OnGetAccountInfoOperationCompleted
            End If
            Me.InvokeAsync("GetAccountInfo", New Object() {loginEmail, loginPassword}, Me.GetAccountInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountInfoCompleted(Me, New GetAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SetCampaignDailyLimit", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCampaignDailyLimit(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal quantity As Integer) As Boolean
            Dim results() As Object = Me.Invoke("SetCampaignDailyLimit", New Object() {loginEmail, APIKey, campaignid, quantity})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCampaignDailyLimitAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal quantity As Integer)
            Me.SetCampaignDailyLimitAsync(loginEmail, APIKey, campaignid, quantity, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCampaignDailyLimitAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal quantity As Integer, ByVal userState As Object)
            If (Me.SetCampaignDailyLimitOperationCompleted Is Nothing) Then
                Me.SetCampaignDailyLimitOperationCompleted = AddressOf Me.OnSetCampaignDailyLimitOperationCompleted
            End If
            Me.InvokeAsync("SetCampaignDailyLimit", New Object() {loginEmail, APIKey, campaignid, quantity}, Me.SetCampaignDailyLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCampaignDailyLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCampaignDailyLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCampaignDailyLimitCompleted(Me, New SetCampaignDailyLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SetCampaignTimeLimit", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCampaignTimeLimit(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal TimeSpan As String) As Boolean
            Dim results() As Object = Me.Invoke("SetCampaignTimeLimit", New Object() {loginEmail, APIKey, campaignid, TimeSpan})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCampaignTimeLimitAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal TimeSpan As String)
            Me.SetCampaignTimeLimitAsync(loginEmail, APIKey, campaignid, TimeSpan, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCampaignTimeLimitAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal TimeSpan As String, ByVal userState As Object)
            If (Me.SetCampaignTimeLimitOperationCompleted Is Nothing) Then
                Me.SetCampaignTimeLimitOperationCompleted = AddressOf Me.OnSetCampaignTimeLimitOperationCompleted
            End If
            Me.InvokeAsync("SetCampaignTimeLimit", New Object() {loginEmail, APIKey, campaignid, TimeSpan}, Me.SetCampaignTimeLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCampaignTimeLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCampaignTimeLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCampaignTimeLimitCompleted(Me, New SetCampaignTimeLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SplitContactListByRange", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SplitContactListByRange(ByVal loginEmail As String, ByVal APIKey As String, ByVal SourceContactListName As String, ByVal Range As String, ByVal TargetContactListName As String) As Boolean
            Dim results() As Object = Me.Invoke("SplitContactListByRange", New Object() {loginEmail, APIKey, SourceContactListName, Range, TargetContactListName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SplitContactListByRangeAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal SourceContactListName As String, ByVal Range As String, ByVal TargetContactListName As String)
            Me.SplitContactListByRangeAsync(loginEmail, APIKey, SourceContactListName, Range, TargetContactListName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SplitContactListByRangeAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal SourceContactListName As String, ByVal Range As String, ByVal TargetContactListName As String, ByVal userState As Object)
            If (Me.SplitContactListByRangeOperationCompleted Is Nothing) Then
                Me.SplitContactListByRangeOperationCompleted = AddressOf Me.OnSplitContactListByRangeOperationCompleted
            End If
            Me.InvokeAsync("SplitContactListByRange", New Object() {loginEmail, APIKey, SourceContactListName, Range, TargetContactListName}, Me.SplitContactListByRangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnSplitContactListByRangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.SplitContactListByRangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SplitContactListByRangeCompleted(Me, New SplitContactListByRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getActiveSubscribersByContactList", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getActiveSubscribersByContactList(ByVal loginEmail As String, ByVal APIKey As String, ByVal contactListName As String) As Integer
            Dim results() As Object = Me.Invoke("getActiveSubscribersByContactList", New Object() {loginEmail, APIKey, contactListName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getActiveSubscribersByContactListAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal contactListName As String)
            Me.getActiveSubscribersByContactListAsync(loginEmail, APIKey, contactListName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getActiveSubscribersByContactListAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal contactListName As String, ByVal userState As Object)
            If (Me.getActiveSubscribersByContactListOperationCompleted Is Nothing) Then
                Me.getActiveSubscribersByContactListOperationCompleted = AddressOf Me.OngetActiveSubscribersByContactListOperationCompleted
            End If
            Me.InvokeAsync("getActiveSubscribersByContactList", New Object() {loginEmail, APIKey, contactListName}, Me.getActiveSubscribersByContactListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetActiveSubscribersByContactListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getActiveSubscribersByContactListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getActiveSubscribersByContactListCompleted(Me, New getActiveSubscribersByContactListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createCampaignDraftSerialize", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCampaignDraftSerialize(ByVal loginEmail As String, ByVal password As String, ByVal strcampaignArgs As String, ByVal category() As String, ByVal interval As Integer) As Integer
            Dim results() As Object = Me.Invoke("createCampaignDraftSerialize", New Object() {loginEmail, password, strcampaignArgs, category, interval})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCampaignDraftSerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal strcampaignArgs As String, ByVal category() As String, ByVal interval As Integer)
            Me.createCampaignDraftSerializeAsync(loginEmail, password, strcampaignArgs, category, interval, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCampaignDraftSerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal strcampaignArgs As String, ByVal category() As String, ByVal interval As Integer, ByVal userState As Object)
            If (Me.createCampaignDraftSerializeOperationCompleted Is Nothing) Then
                Me.createCampaignDraftSerializeOperationCompleted = AddressOf Me.OncreateCampaignDraftSerializeOperationCompleted
            End If
            Me.InvokeAsync("createCampaignDraftSerialize", New Object() {loginEmail, password, strcampaignArgs, category, interval}, Me.createCampaignDraftSerializeOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCampaignDraftSerializeOperationCompleted(ByVal arg As Object)
            If (Not (Me.createCampaignDraftSerializeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCampaignDraftSerializeCompleted(Me, New createCampaignDraftSerializeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createCampaignSerialize", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCampaignSerialize(ByVal loginEmail As String, ByVal password As String, ByVal strcampaignArgs As String, ByVal category() As String, ByVal interval As Integer) As Integer
            Dim results() As Object = Me.Invoke("createCampaignSerialize", New Object() {loginEmail, password, strcampaignArgs, category, interval})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCampaignSerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal strcampaignArgs As String, ByVal category() As String, ByVal interval As Integer)
            Me.createCampaignSerializeAsync(loginEmail, password, strcampaignArgs, category, interval, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCampaignSerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal strcampaignArgs As String, ByVal category() As String, ByVal interval As Integer, ByVal userState As Object)
            If (Me.createCampaignSerializeOperationCompleted Is Nothing) Then
                Me.createCampaignSerializeOperationCompleted = AddressOf Me.OncreateCampaignSerializeOperationCompleted
            End If
            Me.InvokeAsync("createCampaignSerialize", New Object() {loginEmail, password, strcampaignArgs, category, interval}, Me.createCampaignSerializeOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCampaignSerializeOperationCompleted(ByVal arg As Object)
            If (Not (Me.createCampaignSerializeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCampaignSerializeCompleted(Me, New createCampaignSerializeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createCampaign2Serialize", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCampaign2Serialize(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, ByVal strcampaignCreatives As String, ByVal category() As String, ByVal interval As Integer, ByVal schedule As Date, ByVal signature As String, ByVal campaignStatus As CampaignStatus) As Integer
            Dim results() As Object = Me.Invoke("createCampaign2Serialize", New Object() {loginEmail, password, campaignName, strcampaignCreatives, category, interval, schedule, signature, campaignStatus})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCampaign2SerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, ByVal strcampaignCreatives As String, ByVal category() As String, ByVal interval As Integer, ByVal schedule As Date, ByVal signature As String, ByVal campaignStatus As CampaignStatus)
            Me.createCampaign2SerializeAsync(loginEmail, password, campaignName, strcampaignCreatives, category, interval, schedule, signature, campaignStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCampaign2SerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, ByVal strcampaignCreatives As String, ByVal category() As String, ByVal interval As Integer, ByVal schedule As Date, ByVal signature As String, ByVal campaignStatus As CampaignStatus, ByVal userState As Object)
            If (Me.createCampaign2SerializeOperationCompleted Is Nothing) Then
                Me.createCampaign2SerializeOperationCompleted = AddressOf Me.OncreateCampaign2SerializeOperationCompleted
            End If
            Me.InvokeAsync("createCampaign2Serialize", New Object() {loginEmail, password, campaignName, strcampaignCreatives, category, interval, schedule, signature, campaignStatus}, Me.createCampaign2SerializeOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCampaign2SerializeOperationCompleted(ByVal arg As Object)
            If (Not (Me.createCampaign2SerializeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCampaign2SerializeCompleted(Me, New createCampaign2SerializeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getCampaignReportSerialize", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCampaignReportSerialize(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer) As String
            Dim results() As Object = Me.Invoke("getCampaignReportSerialize", New Object() {loginEmail, password, campaignID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignReportSerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer)
            Me.getCampaignReportSerializeAsync(loginEmail, password, campaignID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignReportSerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal userState As Object)
            If (Me.getCampaignReportSerializeOperationCompleted Is Nothing) Then
                Me.getCampaignReportSerializeOperationCompleted = AddressOf Me.OngetCampaignReportSerializeOperationCompleted
            End If
            Me.InvokeAsync("getCampaignReportSerialize", New Object() {loginEmail, password, campaignID}, Me.getCampaignReportSerializeOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignReportSerializeOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignReportSerializeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignReportSerializeCompleted(Me, New getCampaignReportSerializeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/addSubscriberByInfoSerialize", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addSubscriberByInfoSerialize(ByVal loginEmail As String, ByVal password As String, ByVal strsubscriberArgs As String, ByVal subscription As String, ByVal optInType As DoubleOptIn) As Boolean
            Dim results() As Object = Me.Invoke("addSubscriberByInfoSerialize", New Object() {loginEmail, password, strsubscriberArgs, subscription, optInType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addSubscriberByInfoSerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal strsubscriberArgs As String, ByVal subscription As String, ByVal optInType As DoubleOptIn)
            Me.addSubscriberByInfoSerializeAsync(loginEmail, password, strsubscriberArgs, subscription, optInType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addSubscriberByInfoSerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal strsubscriberArgs As String, ByVal subscription As String, ByVal optInType As DoubleOptIn, ByVal userState As Object)
            If (Me.addSubscriberByInfoSerializeOperationCompleted Is Nothing) Then
                Me.addSubscriberByInfoSerializeOperationCompleted = AddressOf Me.OnaddSubscriberByInfoSerializeOperationCompleted
            End If
            Me.InvokeAsync("addSubscriberByInfoSerialize", New Object() {loginEmail, password, strsubscriberArgs, subscription, optInType}, Me.addSubscriberByInfoSerializeOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddSubscriberByInfoSerializeOperationCompleted(ByVal arg As Object)
            If (Not (Me.addSubscriberByInfoSerializeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addSubscriberByInfoSerializeCompleted(Me, New addSubscriberByInfoSerializeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/addSubscribersByInfoSerialize", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addSubscribersByInfoSerialize(ByVal loginEmail As String, ByVal password As String, ByVal strsubscriberArgs As String, ByVal subscription As String, ByVal optInType As DoubleOptIn) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("addSubscribersByInfoSerialize", New Object() {loginEmail, password, strsubscriberArgs, subscription, optInType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addSubscribersByInfoSerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal strsubscriberArgs As String, ByVal subscription As String, ByVal optInType As DoubleOptIn)
            Me.addSubscribersByInfoSerializeAsync(loginEmail, password, strsubscriberArgs, subscription, optInType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addSubscribersByInfoSerializeAsync(ByVal loginEmail As String, ByVal password As String, ByVal strsubscriberArgs As String, ByVal subscription As String, ByVal optInType As DoubleOptIn, ByVal userState As Object)
            If (Me.addSubscribersByInfoSerializeOperationCompleted Is Nothing) Then
                Me.addSubscribersByInfoSerializeOperationCompleted = AddressOf Me.OnaddSubscribersByInfoSerializeOperationCompleted
            End If
            Me.InvokeAsync("addSubscribersByInfoSerialize", New Object() {loginEmail, password, strsubscriberArgs, subscription, optInType}, Me.addSubscribersByInfoSerializeOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddSubscribersByInfoSerializeOperationCompleted(ByVal arg As Object)
            If (Not (Me.addSubscribersByInfoSerializeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addSubscribersByInfoSerializeCompleted(Me, New addSubscribersByInfoSerializeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/ExcludeContacts", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExcludeContacts(ByVal loginEmail As String, ByVal apiKey As String, ByVal contacts() As String, ByVal excludes() As String) As String
            Dim results() As Object = Me.Invoke("ExcludeContacts", New Object() {loginEmail, apiKey, contacts, excludes})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExcludeContactsAsync(ByVal loginEmail As String, ByVal apiKey As String, ByVal contacts() As String, ByVal excludes() As String)
            Me.ExcludeContactsAsync(loginEmail, apiKey, contacts, excludes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExcludeContactsAsync(ByVal loginEmail As String, ByVal apiKey As String, ByVal contacts() As String, ByVal excludes() As String, ByVal userState As Object)
            If (Me.ExcludeContactsOperationCompleted Is Nothing) Then
                Me.ExcludeContactsOperationCompleted = AddressOf Me.OnExcludeContactsOperationCompleted
            End If
            Me.InvokeAsync("ExcludeContacts", New Object() {loginEmail, apiKey, contacts, excludes}, Me.ExcludeContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnExcludeContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcludeContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcludeContactsCompleted(Me, New ExcludeContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/ExcludeContactsByDomain", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExcludeContactsByDomain(ByVal loginEmail As String, ByVal apiKey As String, ByVal contacts() As String, ByVal domain As String) As String
            Dim results() As Object = Me.Invoke("ExcludeContactsByDomain", New Object() {loginEmail, apiKey, contacts, domain})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExcludeContactsByDomainAsync(ByVal loginEmail As String, ByVal apiKey As String, ByVal contacts() As String, ByVal domain As String)
            Me.ExcludeContactsByDomainAsync(loginEmail, apiKey, contacts, domain, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExcludeContactsByDomainAsync(ByVal loginEmail As String, ByVal apiKey As String, ByVal contacts() As String, ByVal domain As String, ByVal userState As Object)
            If (Me.ExcludeContactsByDomainOperationCompleted Is Nothing) Then
                Me.ExcludeContactsByDomainOperationCompleted = AddressOf Me.OnExcludeContactsByDomainOperationCompleted
            End If
            Me.InvokeAsync("ExcludeContactsByDomain", New Object() {loginEmail, apiKey, contacts, domain}, Me.ExcludeContactsByDomainOperationCompleted, userState)
        End Sub
        
        Private Sub OnExcludeContactsByDomainOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcludeContactsByDomainCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcludeContactsByDomainCompleted(Me, New ExcludeContactsByDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/ExcludeContactsByNetEase", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExcludeContactsByNetEase(ByVal loginEmail As String, ByVal apiKey As String, ByVal contacts() As String, ByVal isNetEase As Boolean) As String
            Dim results() As Object = Me.Invoke("ExcludeContactsByNetEase", New Object() {loginEmail, apiKey, contacts, isNetEase})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExcludeContactsByNetEaseAsync(ByVal loginEmail As String, ByVal apiKey As String, ByVal contacts() As String, ByVal isNetEase As Boolean)
            Me.ExcludeContactsByNetEaseAsync(loginEmail, apiKey, contacts, isNetEase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExcludeContactsByNetEaseAsync(ByVal loginEmail As String, ByVal apiKey As String, ByVal contacts() As String, ByVal isNetEase As Boolean, ByVal userState As Object)
            If (Me.ExcludeContactsByNetEaseOperationCompleted Is Nothing) Then
                Me.ExcludeContactsByNetEaseOperationCompleted = AddressOf Me.OnExcludeContactsByNetEaseOperationCompleted
            End If
            Me.InvokeAsync("ExcludeContactsByNetEase", New Object() {loginEmail, apiKey, contacts, isNetEase}, Me.ExcludeContactsByNetEaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnExcludeContactsByNetEaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcludeContactsByNetEaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcludeContactsByNetEaseCompleted(Me, New ExcludeContactsByNetEaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetNetEaseRank", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNetEaseRank(ByVal loginEmail As String, ByVal apiKey As String) As Integer
            Dim results() As Object = Me.Invoke("GetNetEaseRank", New Object() {loginEmail, apiKey})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNetEaseRankAsync(ByVal loginEmail As String, ByVal apiKey As String)
            Me.GetNetEaseRankAsync(loginEmail, apiKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNetEaseRankAsync(ByVal loginEmail As String, ByVal apiKey As String, ByVal userState As Object)
            If (Me.GetNetEaseRankOperationCompleted Is Nothing) Then
                Me.GetNetEaseRankOperationCompleted = AddressOf Me.OnGetNetEaseRankOperationCompleted
            End If
            Me.InvokeAsync("GetNetEaseRank", New Object() {loginEmail, apiKey}, Me.GetNetEaseRankOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNetEaseRankOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNetEaseRankCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNetEaseRankCompleted(Me, New GetNetEaseRankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Public Enum AccountType
        
        '''<remarks/>
        Email
        
        '''<remarks/>
        SMS
        
        '''<remarks/>
        WhatsApp
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class Campaign
        
        Private campaignNameField As String
        
        Private fromEmailField As String
        
        Private fromField As String
        
        Private subjectField As String
        
        Private contentField As String
        
        Private signatureField As String
        
        Private scheduleField As Date
        
        '''<remarks/>
        Public Property campaignName() As String
            Get
                Return Me.campaignNameField
            End Get
            Set
                Me.campaignNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property fromEmail() As String
            Get
                Return Me.fromEmailField
            End Get
            Set
                Me.fromEmailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property from() As String
            Get
                Return Me.fromField
            End Get
            Set
                Me.fromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property subject() As String
            Get
                Return Me.subjectField
            End Get
            Set
                Me.subjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property content() As String
            Get
                Return Me.contentField
            End Get
            Set
                Me.contentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property signature() As String
            Get
                Return Me.signatureField
            End Get
            Set
                Me.signatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property schedule() As Date
            Get
                Return Me.scheduleField
            End Get
            Set
                Me.scheduleField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class server
        
        Private serverIDField As String
        
        Private hostField As String
        
        Private portField As String
        
        Private passwordField As String
        
        Private usernameField As String
        
        Private queuelengthField As String
        
        '''<remarks/>
        Public Property ServerID() As String
            Get
                Return Me.serverIDField
            End Get
            Set
                Me.serverIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Host() As String
            Get
                Return Me.hostField
            End Get
            Set
                Me.hostField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Port() As String
            Get
                Return Me.portField
            End Get
            Set
                Me.portField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Username() As String
            Get
                Return Me.usernameField
            End Get
            Set
                Me.usernameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Queuelength() As String
            Get
                Return Me.queuelengthField
            End Get
            Set
                Me.queuelengthField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class CampaignAttachment
        
        Private displayNameField As String
        
        Private fileField() As Byte
        
        Private fileTypeField As String
        
        '''<remarks/>
        Public Property displayName() As String
            Get
                Return Me.displayNameField
            End Get
            Set
                Me.displayNameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property file() As Byte()
            Get
                Return Me.fileField
            End Get
            Set
                Me.fileField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property fileType() As String
            Get
                Return Me.fileTypeField
            End Get
            Set
                Me.fileTypeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class errorDetail
        
        Private errorCodeField As String
        
        Private errorDescField As String
        
        '''<remarks/>
        Public Property errorCode() As String
            Get
                Return Me.errorCodeField
            End Get
            Set
                Me.errorCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property errorDesc() As String
            Get
                Return Me.errorDescField
            End Get
            Set
                Me.errorDescField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class ResponseResult
        
        Private trackingIdField As String
        
        Private customerReferenceNoField As String
        
        Private statusField As String
        
        Private errorDetailsField() As errorDetail
        
        '''<remarks/>
        Public Property trackingId() As String
            Get
                Return Me.trackingIdField
            End Get
            Set
                Me.trackingIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customerReferenceNo() As String
            Get
                Return Me.customerReferenceNoField
            End Get
            Set
                Me.customerReferenceNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property errorDetails() As errorDetail()
            Get
                Return Me.errorDetailsField
            End Get
            Set
                Me.errorDetailsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class Subscriber
        
        Private emailField As String
        
        Private firstNameField As String
        
        Private middleNameField As String
        
        Private lastNameField As String
        
        Private jobTitleField As String
        
        Private companyField As String
        
        Private homePhoneField As String
        
        Private address1Field As String
        
        Private address2Field As String
        
        Private address3Field As String
        
        Private cityField As String
        
        Private stateField As String
        
        Private countryField As String
        
        Private postalCodeField As String
        
        Private subPostalCodeField As String
        
        Private faxField As String
        
        Private webUrlField As String
        
        Private titleField As String
        
        Private genderField As String
        
        Private date1Field As Date
        
        Private date2Field As Date
        
        Private customField1Field As String
        
        Private customField2Field As String
        
        Private customField3Field As String
        
        Private customField4Field As String
        
        Private customField5Field As String
        
        Private customField6Field As String
        
        Private customField7Field As String
        
        Private customField8Field As String
        
        Private customField9Field As String
        
        Private customField10Field As String
        
        Private customField11Field As String
        
        Private customField12Field As String
        
        Private customField13Field As String
        
        Private customField14Field As String
        
        Private customField15Field As String
        
        '''<remarks/>
        Public Property email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property firstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property middleName() As String
            Get
                Return Me.middleNameField
            End Get
            Set
                Me.middleNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property jobTitle() As String
            Get
                Return Me.jobTitleField
            End Get
            Set
                Me.jobTitleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property company() As String
            Get
                Return Me.companyField
            End Get
            Set
                Me.companyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property homePhone() As String
            Get
                Return Me.homePhoneField
            End Get
            Set
                Me.homePhoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address1() As String
            Get
                Return Me.address1Field
            End Get
            Set
                Me.address1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address2() As String
            Get
                Return Me.address2Field
            End Get
            Set
                Me.address2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address3() As String
            Get
                Return Me.address3Field
            End Get
            Set
                Me.address3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property city() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property state() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property country() As String
            Get
                Return Me.countryField
            End Get
            Set
                Me.countryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property postalCode() As String
            Get
                Return Me.postalCodeField
            End Get
            Set
                Me.postalCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property subPostalCode() As String
            Get
                Return Me.subPostalCodeField
            End Get
            Set
                Me.subPostalCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property fax() As String
            Get
                Return Me.faxField
            End Get
            Set
                Me.faxField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property webUrl() As String
            Get
                Return Me.webUrlField
            End Get
            Set
                Me.webUrlField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property title() As String
            Get
                Return Me.titleField
            End Get
            Set
                Me.titleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property gender() As String
            Get
                Return Me.genderField
            End Get
            Set
                Me.genderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property date1() As Date
            Get
                Return Me.date1Field
            End Get
            Set
                Me.date1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property date2() As Date
            Get
                Return Me.date2Field
            End Get
            Set
                Me.date2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField1() As String
            Get
                Return Me.customField1Field
            End Get
            Set
                Me.customField1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField2() As String
            Get
                Return Me.customField2Field
            End Get
            Set
                Me.customField2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField3() As String
            Get
                Return Me.customField3Field
            End Get
            Set
                Me.customField3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField4() As String
            Get
                Return Me.customField4Field
            End Get
            Set
                Me.customField4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField5() As String
            Get
                Return Me.customField5Field
            End Get
            Set
                Me.customField5Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField6() As String
            Get
                Return Me.customField6Field
            End Get
            Set
                Me.customField6Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField7() As String
            Get
                Return Me.customField7Field
            End Get
            Set
                Me.customField7Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField8() As String
            Get
                Return Me.customField8Field
            End Get
            Set
                Me.customField8Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField9() As String
            Get
                Return Me.customField9Field
            End Get
            Set
                Me.customField9Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField10() As String
            Get
                Return Me.customField10Field
            End Get
            Set
                Me.customField10Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField11() As String
            Get
                Return Me.customField11Field
            End Get
            Set
                Me.customField11Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField12() As String
            Get
                Return Me.customField12Field
            End Get
            Set
                Me.customField12Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField13() As String
            Get
                Return Me.customField13Field
            End Get
            Set
                Me.customField13Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField14() As String
            Get
                Return Me.customField14Field
            End Get
            Set
                Me.customField14Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField15() As String
            Get
                Return Me.customField15Field
            End Get
            Set
                Me.customField15Field = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class CampaignReport
        
        Private campaignIdField As Integer
        
        Private campaignNameField As String
        
        Private sentCountField As Integer
        
        Private failCountField As Integer
        
        Private openCountField As Integer
        
        Private allClickCountField As Integer
        
        Private uniqueClicksCountField As Integer
        
        Private conversionCountField As Integer
        
        Private bounceCountField As Integer
        
        Private spamCountField As Integer
        
        Private unsubscribeCountField As Integer
        
        Private undeliverableCountField As Integer
        
        Private statusField As CampaignStatus
        
        Private dateSentField As Date
        
        Private createDateField As Date
        
        Private scheduleField As Date
        
        '''<remarks/>
        Public Property CampaignId() As Integer
            Get
                Return Me.campaignIdField
            End Get
            Set
                Me.campaignIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CampaignName() As String
            Get
                Return Me.campaignNameField
            End Get
            Set
                Me.campaignNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SentCount() As Integer
            Get
                Return Me.sentCountField
            End Get
            Set
                Me.sentCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FailCount() As Integer
            Get
                Return Me.failCountField
            End Get
            Set
                Me.failCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OpenCount() As Integer
            Get
                Return Me.openCountField
            End Get
            Set
                Me.openCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AllClickCount() As Integer
            Get
                Return Me.allClickCountField
            End Get
            Set
                Me.allClickCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UniqueClicksCount() As Integer
            Get
                Return Me.uniqueClicksCountField
            End Get
            Set
                Me.uniqueClicksCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConversionCount() As Integer
            Get
                Return Me.conversionCountField
            End Get
            Set
                Me.conversionCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BounceCount() As Integer
            Get
                Return Me.bounceCountField
            End Get
            Set
                Me.bounceCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpamCount() As Integer
            Get
                Return Me.spamCountField
            End Get
            Set
                Me.spamCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnsubscribeCount() As Integer
            Get
                Return Me.unsubscribeCountField
            End Get
            Set
                Me.unsubscribeCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UndeliverableCount() As Integer
            Get
                Return Me.undeliverableCountField
            End Get
            Set
                Me.undeliverableCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As CampaignStatus
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DateSent() As Date
            Get
                Return Me.dateSentField
            End Get
            Set
                Me.dateSentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreateDate() As Date
            Get
                Return Me.createDateField
            End Get
            Set
                Me.createDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Schedule() As Date
            Get
                Return Me.scheduleField
            End Get
            Set
                Me.scheduleField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Public Enum CampaignStatus
        
        '''<remarks/>
        Inexistent
        
        '''<remarks/>
        Deleted
        
        '''<remarks/>
        Sent
        
        '''<remarks/>
        Draft
        
        '''<remarks/>
        Pause
        
        '''<remarks/>
        Sending
        
        '''<remarks/>
        Waiting
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class CampaignCreatives
        
        Private subjectField As String
        
        Private displayNameField As String
        
        Private fromAddressField As String
        
        Private replyToField As String
        
        Private creativeContentField As String
        
        Private targetField As String
        
        Private isCampaignDefaultField As Boolean
        
        '''<remarks/>
        Public Property subject() As String
            Get
                Return Me.subjectField
            End Get
            Set
                Me.subjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property displayName() As String
            Get
                Return Me.displayNameField
            End Get
            Set
                Me.displayNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property fromAddress() As String
            Get
                Return Me.fromAddressField
            End Get
            Set
                Me.fromAddressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property replyTo() As String
            Get
                Return Me.replyToField
            End Get
            Set
                Me.replyToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property creativeContent() As String
            Get
                Return Me.creativeContentField
            End Get
            Set
                Me.creativeContentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property target() As String
            Get
                Return Me.targetField
            End Get
            Set
                Me.targetField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isCampaignDefault() As Boolean
            Get
                Return Me.isCampaignDefaultField
            End Get
            Set
                Me.isCampaignDefaultField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Public Enum SubscriptionStatus
        
        '''<remarks/>
        Any
        
        '''<remarks/>
        Deleted
        
        '''<remarks/>
        Active
        
        '''<remarks/>
        Invisible
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Public Enum SubscriberStatus
        
        '''<remarks/>
        Any
        
        '''<remarks/>
        Deleted
        
        '''<remarks/>
        Active
        
        '''<remarks/>
        Unsubscribed
        
        '''<remarks/>
        Unconfirmed
        
        '''<remarks/>
        Undeliverable
        
        '''<remarks/>
        SpamReporter
        
        '''<remarks/>
        DoNotMail
        
        '''<remarks/>
        Blacklist
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Public Enum DoubleOptIn
        
        '''<remarks/>
        ReferToUserOption
        
        '''<remarks/>
        [On]
        
        '''<remarks/>
        Off
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Public Enum EventType
        
        '''<remarks/>
        Open
        
        '''<remarks/>
        Click
        
        '''<remarks/>
        Bounce
        
        '''<remarks/>
        SPAM
        
        '''<remarks/>
        Invalid
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub getUserSentReportCompletedEventHandler(ByVal sender As Object, ByVal e As getUserSentReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUserSentReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetUserCreditCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserCreditCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserCreditCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetSubscriberDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubscriberDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubscriberDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignSubscriberDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignSubscriberDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignSubscriberDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetUploadRequestStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetUploadRequestStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUploadRequestStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UnsubscribeEmailInAccountCompletedEventHandler(ByVal sender As Object, ByVal e As UnsubscribeEmailInAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnsubscribeEmailInAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UnsubscribeEmailInContactListCompletedEventHandler(ByVal sender As Object, ByVal e As UnsubscribeEmailInContactListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnsubscribeEmailInContactListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub createCampaignDraftCompletedEventHandler(ByVal sender As Object, ByVal e As createCampaignDraftCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCampaignDraftCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub createCampaignDraft2CompletedEventHandler(ByVal sender As Object, ByVal e As createCampaignDraft2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCampaignDraft2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub createCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As createCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CreateCampaignBySimpleTypeCompletedEventHandler(ByVal sender As Object, ByVal e As CreateCampaignBySimpleTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateCampaignBySimpleTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub createCampaign2CompletedEventHandler(ByVal sender As Object, ByVal e As createCampaign2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCampaign2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UpdateCampaignStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCampaignStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCampaignStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SendSMSCompletedEventHandler(ByVal sender As Object, ByVal e As SendSMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendSMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetSmsRepliesCompletedEventHandler(ByVal sender As Object, ByVal e As GetSmsRepliesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSmsRepliesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub getCampaignStatusCompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CampaignStatus
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CampaignStatus)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub getCampaignReportCompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CampaignReport
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CampaignReport)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub getCampaignReport2CompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignReport2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignReport2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ChangePublishStatusCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub getAllSubscriptionCompletedEventHandler(ByVal sender As Object, ByVal e As getAllSubscriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAllSubscriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub getSubscriptionCompletedEventHandler(ByVal sender As Object, ByVal e As getSubscriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSubscriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub getSubscriptions2StringCompletedEventHandler(ByVal sender As Object, ByVal e As getSubscriptions2StringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSubscriptions2StringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetSubscribersCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubscribersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub createSubscriptionCompletedEventHandler(ByVal sender As Object, ByVal e As createSubscriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createSubscriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub createContactListCompletedEventHandler(ByVal sender As Object, ByVal e As createContactListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createContactListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub addSubscriberByEmailCompletedEventHandler(ByVal sender As Object, ByVal e As addSubscriberByEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addSubscriberByEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub DeleteSubscribersFromListCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSubscribersFromListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSubscribersFromListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub DeleteSubscribersFromAccountCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSubscribersFromAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSubscribersFromAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub addSubscriberByInfoCompletedEventHandler(ByVal sender As Object, ByVal e As addSubscriberByInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addSubscriberByInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub addSubscribersByInfoCompletedEventHandler(ByVal sender As Object, ByVal e As addSubscribersByInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addSubscribersByInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub addSubscribersByInfo2CompletedEventHandler(ByVal sender As Object, ByVal e As addSubscribersByInfo2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addSubscribersByInfo2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ResponseResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ResponseResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub Send2CompletedEventHandler(ByVal sender As Object, ByVal e As Send2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Send2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub Send3CompletedEventHandler(ByVal sender As Object, ByVal e As Send3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Send3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SendmultipleAttachmentCompletedEventHandler(ByVal sender As Object, ByVal e As SendmultipleAttachmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendmultipleAttachmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SendMTREmailCompletedEventHandler(ByVal sender As Object, ByVal e As SendMTREmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendMTREmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SendWithAttachmentCompletedEventHandler(ByVal sender As Object, ByVal e As SendWithAttachmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendWithAttachmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SendSimpleAttachmentCompletedEventHandler(ByVal sender As Object, ByVal e As SendSimpleAttachmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendSimpleAttachmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub EmailSendCompletedEventHandler(ByVal sender As Object, ByVal e As EmailSendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EmailSendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UpdateMemberEmailCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMemberEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMemberEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SendTemplateEmailCompletedEventHandler(ByVal sender As Object, ByVal e As SendTemplateEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendTemplateEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SendCompletedEventHandler(ByVal sender As Object, ByVal e As SendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SendAndCcCompletedEventHandler(ByVal sender As Object, ByVal e As SendAndCcCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendAndCcCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetEmailStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmailStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmailStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetSMSStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMSStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMSStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignsSend2TalkkingUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignsSend2TalkkingUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignsSend2TalkkingUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SendBatchCompletedEventHandler(ByVal sender As Object, ByVal e As SendBatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendBatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As server
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),server)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SearchContactsCompletedEventHandler(ByVal sender As Object, ByVal e As SearchContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SearchContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SplitContactsCompletedEventHandler(ByVal sender As Object, ByVal e As SplitContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SplitContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ExcludeContactListCompletedEventHandler(ByVal sender As Object, ByVal e As ExcludeContactListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExcludeContactListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignDetailReportCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignDetailReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignDetailReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignSentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignSentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignSentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignOpensCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignOpensCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignOpensCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignOpensJsonCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignOpensJsonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignOpensJsonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignOpensWithNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignOpensWithNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignOpensWithNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignClicksCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignClicksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignClicksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignClicksWithNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignClicksWithNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignClicksWithNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignUnsubscribesCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignUnsubscribesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignUnsubscribesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetAccountUnsubscribesCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountUnsubscribesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountUnsubscribesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetAccountUnsubscribesToFtpCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountUnsubscribesToFtpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountUnsubscribesToFtpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignAbusesCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignAbusesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignAbusesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignConversionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignConversionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignConversionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignConvertionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignConvertionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignConvertionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetCampaignBouncesCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignBouncesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignBouncesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AddSenderEmailCompletedEventHandler(ByVal sender As Object, ByVal e As AddSenderEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSenderEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AddOrUpdateWebhookCompletedEventHandler(ByVal sender As Object, ByVal e As AddOrUpdateWebhookCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddOrUpdateWebhookCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CreateNewAccountCompletedEventHandler(ByVal sender As Object, ByVal e As CreateNewAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateNewAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TransferCreditCompletedEventHandler(ByVal sender As Object, ByVal e As TransferCreditCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransferCreditCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UplodeZipFileCompletedEventHandler(ByVal sender As Object, ByVal e As UplodeZipFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UplodeZipFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UploadContactListFileCompletedEventHandler(ByVal sender As Object, ByVal e As UploadContactListFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadContactListFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ActivationCampaignByFtpFileCompletedEventHandler(ByVal sender As Object, ByVal e As ActivationCampaignByFtpFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ActivationCampaignByFtpFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NameExistsCompletedEventHandler(ByVal sender As Object, ByVal e As NameExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NameExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub EmailExistsCompletedEventHandler(ByVal sender As Object, ByVal e As EmailExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EmailExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub getCampaignIDCompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetAccessTokenCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccessTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccessTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub VerifyAccessTokenCompletedEventHandler(ByVal sender As Object, ByVal e As VerifyAccessTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VerifyAccessTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetAPIKeyCompletedEventHandler(ByVal sender As Object, ByVal e As GetAPIKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAPIKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetAccountInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SetCampaignDailyLimitCompletedEventHandler(ByVal sender As Object, ByVal e As SetCampaignDailyLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCampaignDailyLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SetCampaignTimeLimitCompletedEventHandler(ByVal sender As Object, ByVal e As SetCampaignTimeLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCampaignTimeLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SplitContactListByRangeCompletedEventHandler(ByVal sender As Object, ByVal e As SplitContactListByRangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SplitContactListByRangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub getActiveSubscribersByContactListCompletedEventHandler(ByVal sender As Object, ByVal e As getActiveSubscribersByContactListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getActiveSubscribersByContactListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub createCampaignDraftSerializeCompletedEventHandler(ByVal sender As Object, ByVal e As createCampaignDraftSerializeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCampaignDraftSerializeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub createCampaignSerializeCompletedEventHandler(ByVal sender As Object, ByVal e As createCampaignSerializeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCampaignSerializeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub createCampaign2SerializeCompletedEventHandler(ByVal sender As Object, ByVal e As createCampaign2SerializeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCampaign2SerializeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub getCampaignReportSerializeCompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignReportSerializeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignReportSerializeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub addSubscriberByInfoSerializeCompletedEventHandler(ByVal sender As Object, ByVal e As addSubscriberByInfoSerializeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addSubscriberByInfoSerializeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub addSubscribersByInfoSerializeCompletedEventHandler(ByVal sender As Object, ByVal e As addSubscribersByInfoSerializeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addSubscribersByInfoSerializeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ExcludeContactsCompletedEventHandler(ByVal sender As Object, ByVal e As ExcludeContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExcludeContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ExcludeContactsByDomainCompletedEventHandler(ByVal sender As Object, ByVal e As ExcludeContactsByDomainCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExcludeContactsByDomainCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ExcludeContactsByNetEaseCompletedEventHandler(ByVal sender As Object, ByVal e As ExcludeContactsByNetEaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExcludeContactsByNetEaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GetNetEaseRankCompletedEventHandler(ByVal sender As Object, ByVal e As GetNetEaseRankCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNetEaseRankCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
