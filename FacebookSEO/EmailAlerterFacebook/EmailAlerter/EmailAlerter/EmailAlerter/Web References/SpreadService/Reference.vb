'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
'
Namespace SpreadService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private createCampaignDraftOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createCampaignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createCampaign2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCampaignStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendSMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePublishStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAllSubscriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSubscriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSubscriptions2StringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubscribersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private createSubscriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addSubscriberByEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSubscribersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addSubscriberByInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addSubscribersByInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Send2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Send3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendBatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SearchContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SplitContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExcludeContactListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignSentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignOpensOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignClicksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignUnsubscribesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignAbusesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignConversionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignConvertionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCampaignBouncesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddSenderEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateNewAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TransferCreditOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UplodeZipFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadContactListFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NameExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EmailExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCampaignIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccessTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VerifyAccessTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAPIKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCampaignDailyLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetCampaignTimeLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SplitContactListByRangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EmailAlerter.My.MySettings.Default.EmailAlerter_SpreadService_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event createCampaignDraftCompleted As createCampaignDraftCompletedEventHandler
        
        '''<remarks/>
        Public Event createCampaignCompleted As createCampaignCompletedEventHandler
        
        '''<remarks/>
        Public Event createCampaign2Completed As createCampaign2CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCampaignStatusCompleted As UpdateCampaignStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event SendSMSCompleted As SendSMSCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignStatusCompleted As getCampaignStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignReportCompleted As getCampaignReportCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePublishStatusCompleted As ChangePublishStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event getAllSubscriptionCompleted As getAllSubscriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event getSubscriptionCompleted As getSubscriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event getSubscriptions2StringCompleted As getSubscriptions2StringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubscribersCompleted As GetSubscribersCompletedEventHandler
        
        '''<remarks/>
        Public Event createSubscriptionCompleted As createSubscriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event addSubscriberByEmailCompleted As addSubscriberByEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSubscribersCompleted As DeleteSubscribersCompletedEventHandler
        
        '''<remarks/>
        Public Event addSubscriberByInfoCompleted As addSubscriberByInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event addSubscribersByInfoCompleted As addSubscribersByInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event Send2Completed As Send2CompletedEventHandler
        
        '''<remarks/>
        Public Event Send3Completed As Send3CompletedEventHandler
        
        '''<remarks/>
        Public Event SendCompleted As SendCompletedEventHandler
        
        '''<remarks/>
        Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler
        
        '''<remarks/>
        Public Event SendBatchCompleted As SendBatchCompletedEventHandler
        
        '''<remarks/>
        Public Event SearchContactsCompleted As SearchContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event SplitContactsCompleted As SplitContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event ExcludeContactListCompleted As ExcludeContactListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignSentsCompleted As GetCampaignSentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignOpensCompleted As GetCampaignOpensCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignClicksCompleted As GetCampaignClicksCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignUnsubscribesCompleted As GetCampaignUnsubscribesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignAbusesCompleted As GetCampaignAbusesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignConversionsCompleted As GetCampaignConversionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignConvertionsCompleted As GetCampaignConvertionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCampaignBouncesCompleted As GetCampaignBouncesCompletedEventHandler
        
        '''<remarks/>
        Public Event AddSenderEmailCompleted As AddSenderEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateNewAccountCompleted As CreateNewAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event TransferCreditCompleted As TransferCreditCompletedEventHandler
        
        '''<remarks/>
        Public Event UplodeZipFileCompleted As UplodeZipFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadContactListFileCompleted As UploadContactListFileCompletedEventHandler
        
        '''<remarks/>
        Public Event NameExistsCompleted As NameExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event EmailExistsCompleted As EmailExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event getCampaignIDCompleted As getCampaignIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccessTokenCompleted As GetAccessTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event VerifyAccessTokenCompleted As VerifyAccessTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAPIKeyCompleted As GetAPIKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountInfoCompleted As GetAccountInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event SetCampaignDailyLimitCompleted As SetCampaignDailyLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event SetCampaignTimeLimitCompleted As SetCampaignTimeLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event SplitContactListByRangeCompleted As SplitContactListByRangeCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createCampaignDraft", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCampaignDraft(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer) As Integer
            Dim results() As Object = Me.Invoke("createCampaignDraft", New Object() {loginEmail, password, campaignArgs, category, interval})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCampaignDraftAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer)
            Me.createCampaignDraftAsync(loginEmail, password, campaignArgs, category, interval, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCampaignDraftAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer, ByVal userState As Object)
            If (Me.createCampaignDraftOperationCompleted Is Nothing) Then
                Me.createCampaignDraftOperationCompleted = AddressOf Me.OncreateCampaignDraftOperationCompleted
            End If
            Me.InvokeAsync("createCampaignDraft", New Object() {loginEmail, password, campaignArgs, category, interval}, Me.createCampaignDraftOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCampaignDraftOperationCompleted(ByVal arg As Object)
            If (Not (Me.createCampaignDraftCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCampaignDraftCompleted(Me, New createCampaignDraftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createCampaign", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCampaign(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer) As Integer
            Dim results() As Object = Me.Invoke("createCampaign", New Object() {loginEmail, password, campaignArgs, category, interval})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCampaignAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer)
            Me.createCampaignAsync(loginEmail, password, campaignArgs, category, interval, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCampaignAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignArgs As Campaign, ByVal category() As String, ByVal interval As Integer, ByVal userState As Object)
            If (Me.createCampaignOperationCompleted Is Nothing) Then
                Me.createCampaignOperationCompleted = AddressOf Me.OncreateCampaignOperationCompleted
            End If
            Me.InvokeAsync("createCampaign", New Object() {loginEmail, password, campaignArgs, category, interval}, Me.createCampaignOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.createCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCampaignCompleted(Me, New createCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createCampaign2", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createCampaign2(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByVal campaignCreatives() As CampaignCreatives, ByVal category() As String, ByVal interval As Integer, ByVal schedule As Date, ByVal signature As String, ByVal campaignStatus As CampaignStatus) As Integer
            Dim results() As Object = Me.Invoke("createCampaign2", New Object() {loginEmail, password, campaignName, campaignCreatives, category, interval, schedule, signature, campaignStatus})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createCampaign2Async(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, ByVal campaignCreatives() As CampaignCreatives, ByVal category() As String, ByVal interval As Integer, ByVal schedule As Date, ByVal signature As String, ByVal campaignStatus As CampaignStatus)
            Me.createCampaign2Async(loginEmail, password, campaignName, campaignCreatives, category, interval, schedule, signature, campaignStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createCampaign2Async(ByVal loginEmail As String, ByVal password As String, ByVal campaignName As String, ByVal campaignCreatives() As CampaignCreatives, ByVal category() As String, ByVal interval As Integer, ByVal schedule As Date, ByVal signature As String, ByVal campaignStatus As CampaignStatus, ByVal userState As Object)
            If (Me.createCampaign2OperationCompleted Is Nothing) Then
                Me.createCampaign2OperationCompleted = AddressOf Me.OncreateCampaign2OperationCompleted
            End If
            Me.InvokeAsync("createCampaign2", New Object() {loginEmail, password, campaignName, campaignCreatives, category, interval, schedule, signature, campaignStatus}, Me.createCampaign2OperationCompleted, userState)
        End Sub
        
        Private Sub OncreateCampaign2OperationCompleted(ByVal arg As Object)
            If (Not (Me.createCampaign2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createCampaign2Completed(Me, New createCampaign2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/UpdateCampaignStatus", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCampaignStatus(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As String, ByVal campaignStatus As CampaignStatus) As Boolean
            Dim results() As Object = Me.Invoke("UpdateCampaignStatus", New Object() {loginEmail, password, campaignID, campaignStatus})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignStatusAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As String, ByVal campaignStatus As CampaignStatus)
            Me.UpdateCampaignStatusAsync(loginEmail, password, campaignID, campaignStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCampaignStatusAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As String, ByVal campaignStatus As CampaignStatus, ByVal userState As Object)
            If (Me.UpdateCampaignStatusOperationCompleted Is Nothing) Then
                Me.UpdateCampaignStatusOperationCompleted = AddressOf Me.OnUpdateCampaignStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateCampaignStatus", New Object() {loginEmail, password, campaignID, campaignStatus}, Me.UpdateCampaignStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCampaignStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCampaignStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCampaignStatusCompleted(Me, New UpdateCampaignStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SendSMS", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendSMS(ByVal loginEmail As String, ByVal APIKey As String, ByVal SMSContent As String, ByVal sender As String, ByVal schedule As Date, ByVal campaignStatus As CampaignStatus, ByVal phoneSubscribers() As String, ByVal category() As String) As Integer
            Dim results() As Object = Me.Invoke("SendSMS", New Object() {loginEmail, APIKey, SMSContent, sender, schedule, campaignStatus, phoneSubscribers, category})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendSMSAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal SMSContent As String, ByVal sender As String, ByVal schedule As Date, ByVal campaignStatus As CampaignStatus, ByVal phoneSubscribers() As String, ByVal category() As String)
            Me.SendSMSAsync(loginEmail, APIKey, SMSContent, sender, schedule, campaignStatus, phoneSubscribers, category, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendSMSAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal SMSContent As String, ByVal sender As String, ByVal schedule As Date, ByVal campaignStatus As CampaignStatus, ByVal phoneSubscribers() As String, ByVal category() As String, ByVal userState As Object)
            If (Me.SendSMSOperationCompleted Is Nothing) Then
                Me.SendSMSOperationCompleted = AddressOf Me.OnSendSMSOperationCompleted
            End If
            Me.InvokeAsync("SendSMS", New Object() {loginEmail, APIKey, SMSContent, sender, schedule, campaignStatus, phoneSubscribers, category}, Me.SendSMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendSMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendSMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendSMSCompleted(Me, New SendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getCampaignStatus", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCampaignStatus(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer) As CampaignStatus
            Dim results() As Object = Me.Invoke("getCampaignStatus", New Object() {loginEmail, password, campaignID})
            Return CType(results(0),CampaignStatus)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignStatusAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer)
            Me.getCampaignStatusAsync(loginEmail, password, campaignID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignStatusAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal userState As Object)
            If (Me.getCampaignStatusOperationCompleted Is Nothing) Then
                Me.getCampaignStatusOperationCompleted = AddressOf Me.OngetCampaignStatusOperationCompleted
            End If
            Me.InvokeAsync("getCampaignStatus", New Object() {loginEmail, password, campaignID}, Me.getCampaignStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignStatusCompleted(Me, New getCampaignStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getCampaignReport", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCampaignReport(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer) As CampaignReport
            Dim results() As Object = Me.Invoke("getCampaignReport", New Object() {loginEmail, password, campaignID})
            Return CType(results(0),CampaignReport)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignReportAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer)
            Me.getCampaignReportAsync(loginEmail, password, campaignID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignReportAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal userState As Object)
            If (Me.getCampaignReportOperationCompleted Is Nothing) Then
                Me.getCampaignReportOperationCompleted = AddressOf Me.OngetCampaignReportOperationCompleted
            End If
            Me.InvokeAsync("getCampaignReport", New Object() {loginEmail, password, campaignID}, Me.getCampaignReportOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignReportCompleted(Me, New getCampaignReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/ChangePublishStatus", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ChangePublishStatus(ByVal LoginEmail As String, ByVal Password As String, ByVal Campaign_id As String, ByVal isPublish As Boolean)
            Me.Invoke("ChangePublishStatus", New Object() {LoginEmail, Password, Campaign_id, isPublish})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePublishStatusAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal Campaign_id As String, ByVal isPublish As Boolean)
            Me.ChangePublishStatusAsync(LoginEmail, Password, Campaign_id, isPublish, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePublishStatusAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal Campaign_id As String, ByVal isPublish As Boolean, ByVal userState As Object)
            If (Me.ChangePublishStatusOperationCompleted Is Nothing) Then
                Me.ChangePublishStatusOperationCompleted = AddressOf Me.OnChangePublishStatusOperationCompleted
            End If
            Me.InvokeAsync("ChangePublishStatus", New Object() {LoginEmail, Password, Campaign_id, isPublish}, Me.ChangePublishStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePublishStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePublishStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePublishStatusCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getAllSubscription", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAllSubscription(ByVal loginEmail As String, ByVal password As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAllSubscription", New Object() {loginEmail, password})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAllSubscriptionAsync(ByVal loginEmail As String, ByVal password As String)
            Me.getAllSubscriptionAsync(loginEmail, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAllSubscriptionAsync(ByVal loginEmail As String, ByVal password As String, ByVal userState As Object)
            If (Me.getAllSubscriptionOperationCompleted Is Nothing) Then
                Me.getAllSubscriptionOperationCompleted = AddressOf Me.OngetAllSubscriptionOperationCompleted
            End If
            Me.InvokeAsync("getAllSubscription", New Object() {loginEmail, password}, Me.getAllSubscriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAllSubscriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAllSubscriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAllSubscriptionCompleted(Me, New getAllSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getSubscription", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSubscription(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getSubscription", New Object() {loginEmail, password, status})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSubscriptionAsync(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus)
            Me.getSubscriptionAsync(loginEmail, password, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSubscriptionAsync(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus, ByVal userState As Object)
            If (Me.getSubscriptionOperationCompleted Is Nothing) Then
                Me.getSubscriptionOperationCompleted = AddressOf Me.OngetSubscriptionOperationCompleted
            End If
            Me.InvokeAsync("getSubscription", New Object() {loginEmail, password, status}, Me.getSubscriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSubscriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSubscriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSubscriptionCompleted(Me, New getSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getSubscriptions2String", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSubscriptions2String(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus) As String
            Dim results() As Object = Me.Invoke("getSubscriptions2String", New Object() {loginEmail, password, status})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSubscriptions2StringAsync(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus)
            Me.getSubscriptions2StringAsync(loginEmail, password, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSubscriptions2StringAsync(ByVal loginEmail As String, ByVal password As String, ByVal status As SubscriptionStatus, ByVal userState As Object)
            If (Me.getSubscriptions2StringOperationCompleted Is Nothing) Then
                Me.getSubscriptions2StringOperationCompleted = AddressOf Me.OngetSubscriptions2StringOperationCompleted
            End If
            Me.InvokeAsync("getSubscriptions2String", New Object() {loginEmail, password, status}, Me.getSubscriptions2StringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSubscriptions2StringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSubscriptions2StringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSubscriptions2StringCompleted(Me, New getSubscriptions2StringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetSubscribers", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubscribers(ByVal loginEmail As String, ByVal password As String, ByVal subscription As String, ByVal status As SubscriberStatus) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSubscribers", New Object() {loginEmail, password, subscription, status})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubscribersAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscription As String, ByVal status As SubscriberStatus)
            Me.GetSubscribersAsync(loginEmail, password, subscription, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubscribersAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscription As String, ByVal status As SubscriberStatus, ByVal userState As Object)
            If (Me.GetSubscribersOperationCompleted Is Nothing) Then
                Me.GetSubscribersOperationCompleted = AddressOf Me.OnGetSubscribersOperationCompleted
            End If
            Me.InvokeAsync("GetSubscribers", New Object() {loginEmail, password, subscription, status}, Me.GetSubscribersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubscribersCompleted(Me, New GetSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/createSubscription", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createSubscription(ByVal loginEmail As String, ByVal password As String, ByVal subscriptionName As String, ByVal description As String) As Boolean
            Dim results() As Object = Me.Invoke("createSubscription", New Object() {loginEmail, password, subscriptionName, description})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createSubscriptionAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriptionName As String, ByVal description As String)
            Me.createSubscriptionAsync(loginEmail, password, subscriptionName, description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createSubscriptionAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriptionName As String, ByVal description As String, ByVal userState As Object)
            If (Me.createSubscriptionOperationCompleted Is Nothing) Then
                Me.createSubscriptionOperationCompleted = AddressOf Me.OncreateSubscriptionOperationCompleted
            End If
            Me.InvokeAsync("createSubscription", New Object() {loginEmail, password, subscriptionName, description}, Me.createSubscriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OncreateSubscriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.createSubscriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createSubscriptionCompleted(Me, New createSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/addSubscriberByEmail", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addSubscriberByEmail(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmail As String, ByVal subscription As String, ByVal optInType As DoubleOptIn) As Boolean
            Dim results() As Object = Me.Invoke("addSubscriberByEmail", New Object() {loginEmail, password, subscriberEmail, subscription, optInType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addSubscriberByEmailAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmail As String, ByVal subscription As String, ByVal optInType As DoubleOptIn)
            Me.addSubscriberByEmailAsync(loginEmail, password, subscriberEmail, subscription, optInType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addSubscriberByEmailAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmail As String, ByVal subscription As String, ByVal optInType As DoubleOptIn, ByVal userState As Object)
            If (Me.addSubscriberByEmailOperationCompleted Is Nothing) Then
                Me.addSubscriberByEmailOperationCompleted = AddressOf Me.OnaddSubscriberByEmailOperationCompleted
            End If
            Me.InvokeAsync("addSubscriberByEmail", New Object() {loginEmail, password, subscriberEmail, subscription, optInType}, Me.addSubscriberByEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddSubscriberByEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.addSubscriberByEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addSubscriberByEmailCompleted(Me, New addSubscriberByEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/DeleteSubscribers", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSubscribers(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmails() As String, ByVal subscription As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteSubscribers", New Object() {loginEmail, password, subscriberEmails, subscription})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscribersAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmails() As String, ByVal subscription As String)
            Me.DeleteSubscribersAsync(loginEmail, password, subscriberEmails, subscription, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscribersAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberEmails() As String, ByVal subscription As String, ByVal userState As Object)
            If (Me.DeleteSubscribersOperationCompleted Is Nothing) Then
                Me.DeleteSubscribersOperationCompleted = AddressOf Me.OnDeleteSubscribersOperationCompleted
            End If
            Me.InvokeAsync("DeleteSubscribers", New Object() {loginEmail, password, subscriberEmails, subscription}, Me.DeleteSubscribersOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSubscribersCompleted(Me, New DeleteSubscribersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/addSubscriberByInfo", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addSubscriberByInfo(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn) As Boolean
            Dim results() As Object = Me.Invoke("addSubscriberByInfo", New Object() {loginEmail, password, subscriberArgs, subscription, optInType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addSubscriberByInfoAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn)
            Me.addSubscriberByInfoAsync(loginEmail, password, subscriberArgs, subscription, optInType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addSubscriberByInfoAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn, ByVal userState As Object)
            If (Me.addSubscriberByInfoOperationCompleted Is Nothing) Then
                Me.addSubscriberByInfoOperationCompleted = AddressOf Me.OnaddSubscriberByInfoOperationCompleted
            End If
            Me.InvokeAsync("addSubscriberByInfo", New Object() {loginEmail, password, subscriberArgs, subscription, optInType}, Me.addSubscriberByInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddSubscriberByInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.addSubscriberByInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addSubscriberByInfoCompleted(Me, New addSubscriberByInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/addSubscribersByInfo", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addSubscribersByInfo(ByVal loginEmail As String, ByVal password As String, <System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)> ByVal subscriberArgs() As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("addSubscribersByInfo", New Object() {loginEmail, password, subscriberArgs, subscription, optInType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addSubscribersByInfoAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs() As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn)
            Me.addSubscribersByInfoAsync(loginEmail, password, subscriberArgs, subscription, optInType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addSubscribersByInfoAsync(ByVal loginEmail As String, ByVal password As String, ByVal subscriberArgs() As Subscriber, ByVal subscription As String, ByVal optInType As DoubleOptIn, ByVal userState As Object)
            If (Me.addSubscribersByInfoOperationCompleted Is Nothing) Then
                Me.addSubscribersByInfoOperationCompleted = AddressOf Me.OnaddSubscribersByInfoOperationCompleted
            End If
            Me.InvokeAsync("addSubscribersByInfo", New Object() {loginEmail, password, subscriberArgs, subscription, optInType}, Me.addSubscribersByInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddSubscribersByInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.addSubscribersByInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addSubscribersByInfoCompleted(Me, New addSubscribersByInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/Send2", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Send2(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String) As String
            Dim results() As Object = Me.Invoke("Send2", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], Subject, Body})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Send2Async(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String)
            Me.Send2Async(LoginEmail, Password, CampaignName, From, FromName, [To], Subject, Body, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Send2Async(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String, ByVal userState As Object)
            If (Me.Send2OperationCompleted Is Nothing) Then
                Me.Send2OperationCompleted = AddressOf Me.OnSend2OperationCompleted
            End If
            Me.InvokeAsync("Send2", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], Subject, Body}, Me.Send2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSend2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Send2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Send2Completed(Me, New Send2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/Send3", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Send3(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String) As String
            Dim results() As Object = Me.Invoke("Send3", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Send3Async(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String)
            Me.Send3Async(LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Send3Async(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal replyTo As String, ByVal Subject As String, ByVal Body As String, ByVal userState As Object)
            If (Me.Send3OperationCompleted Is Nothing) Then
                Me.Send3OperationCompleted = AddressOf Me.OnSend3OperationCompleted
            End If
            Me.InvokeAsync("Send3", New Object() {LoginEmail, Password, CampaignName, From, FromName, [To], replyTo, Subject, Body}, Me.Send3OperationCompleted, userState)
        End Sub
        
        Private Sub OnSend3OperationCompleted(ByVal arg As Object)
            If (Not (Me.Send3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Send3Completed(Me, New Send3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/Send", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Send(ByVal LoginEmail As String, ByVal Password As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String) As String
            Dim results() As Object = Me.Invoke("Send", New Object() {LoginEmail, Password, From, FromName, [To], Subject, Body})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String)
            Me.SendAsync(LoginEmail, Password, From, FromName, [To], Subject, Body, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal From As String, ByVal FromName As String, ByVal [To] As String, ByVal Subject As String, ByVal Body As String, ByVal userState As Object)
            If (Me.SendOperationCompleted Is Nothing) Then
                Me.SendOperationCompleted = AddressOf Me.OnSendOperationCompleted
            End If
            Me.InvokeAsync("Send", New Object() {LoginEmail, Password, From, FromName, [To], Subject, Body}, Me.SendOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendCompleted(Me, New SendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/HelloWorld", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(-1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloWorldCompleted(Me, New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SendBatch", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendBatch(ByVal xml As String) As server
            Dim results() As Object = Me.Invoke("SendBatch", New Object() {xml})
            Return CType(results(0),server)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendBatchAsync(ByVal xml As String)
            Me.SendBatchAsync(xml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendBatchAsync(ByVal xml As String, ByVal userState As Object)
            If (Me.SendBatchOperationCompleted Is Nothing) Then
                Me.SendBatchOperationCompleted = AddressOf Me.OnSendBatchOperationCompleted
            End If
            Me.InvokeAsync("SendBatch", New Object() {xml}, Me.SendBatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendBatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendBatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendBatchCompleted(Me, New SendBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SearchContacts", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SearchContacts(ByVal LoginEmail As String, ByVal Password As String, ByVal Criteria As String, ByVal TopN As Integer, ByVal SaveAsList As String, ByVal ForceCreate As Boolean) As Integer
            Dim results() As Object = Me.Invoke("SearchContacts", New Object() {LoginEmail, Password, Criteria, TopN, SaveAsList, ForceCreate})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SearchContactsAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal Criteria As String, ByVal TopN As Integer, ByVal SaveAsList As String, ByVal ForceCreate As Boolean)
            Me.SearchContactsAsync(LoginEmail, Password, Criteria, TopN, SaveAsList, ForceCreate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SearchContactsAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal Criteria As String, ByVal TopN As Integer, ByVal SaveAsList As String, ByVal ForceCreate As Boolean, ByVal userState As Object)
            If (Me.SearchContactsOperationCompleted Is Nothing) Then
                Me.SearchContactsOperationCompleted = AddressOf Me.OnSearchContactsOperationCompleted
            End If
            Me.InvokeAsync("SearchContacts", New Object() {LoginEmail, Password, Criteria, TopN, SaveAsList, ForceCreate}, Me.SearchContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSearchContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SearchContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SearchContactsCompleted(Me, New SearchContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SplitContacts", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SplitContacts(ByVal LoginEmail As String, ByVal Password As String, ByVal oldListName As String, ByVal SaveAsList As String) As Boolean
            Dim results() As Object = Me.Invoke("SplitContacts", New Object() {LoginEmail, Password, oldListName, SaveAsList})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SplitContactsAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal oldListName As String, ByVal SaveAsList As String)
            Me.SplitContactsAsync(LoginEmail, Password, oldListName, SaveAsList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SplitContactsAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal oldListName As String, ByVal SaveAsList As String, ByVal userState As Object)
            If (Me.SplitContactsOperationCompleted Is Nothing) Then
                Me.SplitContactsOperationCompleted = AddressOf Me.OnSplitContactsOperationCompleted
            End If
            Me.InvokeAsync("SplitContacts", New Object() {LoginEmail, Password, oldListName, SaveAsList}, Me.SplitContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSplitContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SplitContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SplitContactsCompleted(Me, New SplitContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/ExcludeContactList", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExcludeContactList(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal ExcludeLists As String) As Integer
            Dim results() As Object = Me.Invoke("ExcludeContactList", New Object() {LoginEmail, Password, CampaignName, ExcludeLists})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExcludeContactListAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal ExcludeLists As String)
            Me.ExcludeContactListAsync(LoginEmail, Password, CampaignName, ExcludeLists, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExcludeContactListAsync(ByVal LoginEmail As String, ByVal Password As String, ByVal CampaignName As String, ByVal ExcludeLists As String, ByVal userState As Object)
            If (Me.ExcludeContactListOperationCompleted Is Nothing) Then
                Me.ExcludeContactListOperationCompleted = AddressOf Me.OnExcludeContactListOperationCompleted
            End If
            Me.InvokeAsync("ExcludeContactList", New Object() {LoginEmail, Password, CampaignName, ExcludeLists}, Me.ExcludeContactListOperationCompleted, userState)
        End Sub
        
        Private Sub OnExcludeContactListOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExcludeContactListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExcludeContactListCompleted(Me, New ExcludeContactListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignSents", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignSents(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignSents", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignSentsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignSentsAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignSentsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignSentsOperationCompleted Is Nothing) Then
                Me.GetCampaignSentsOperationCompleted = AddressOf Me.OnGetCampaignSentsOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignSents", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignSentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignSentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignSentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignSentsCompleted(Me, New GetCampaignSentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignOpens", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignOpens(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignOpens", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignOpensAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignOpensAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignOpensAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignOpensOperationCompleted Is Nothing) Then
                Me.GetCampaignOpensOperationCompleted = AddressOf Me.OnGetCampaignOpensOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignOpens", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignOpensOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignOpensOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignOpensCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignOpensCompleted(Me, New GetCampaignOpensCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignClicks", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignClicks(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignClicks", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignClicksAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignClicksAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignClicksAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignClicksOperationCompleted Is Nothing) Then
                Me.GetCampaignClicksOperationCompleted = AddressOf Me.OnGetCampaignClicksOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignClicks", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignClicksOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignClicksOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignClicksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignClicksCompleted(Me, New GetCampaignClicksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignUnsubscribes", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignUnsubscribes(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignUnsubscribes", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignUnsubscribesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignUnsubscribesAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignUnsubscribesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignUnsubscribesOperationCompleted Is Nothing) Then
                Me.GetCampaignUnsubscribesOperationCompleted = AddressOf Me.OnGetCampaignUnsubscribesOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignUnsubscribes", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignUnsubscribesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignUnsubscribesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignUnsubscribesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignUnsubscribesCompleted(Me, New GetCampaignUnsubscribesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignAbuses", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignAbuses(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignAbuses", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignAbusesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignAbusesAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignAbusesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignAbusesOperationCompleted Is Nothing) Then
                Me.GetCampaignAbusesOperationCompleted = AddressOf Me.OnGetCampaignAbusesOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignAbuses", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignAbusesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignAbusesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignAbusesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignAbusesCompleted(Me, New GetCampaignAbusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignConversions", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignConversions(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignConversions", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignConversionsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignConversionsAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignConversionsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignConversionsOperationCompleted Is Nothing) Then
                Me.GetCampaignConversionsOperationCompleted = AddressOf Me.OnGetCampaignConversionsOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignConversions", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignConversionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignConversionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignConversionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignConversionsCompleted(Me, New GetCampaignConversionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignConvertions", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignConvertions(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignConvertions", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignConvertionsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignConvertionsAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignConvertionsAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignConvertionsOperationCompleted Is Nothing) Then
                Me.GetCampaignConvertionsOperationCompleted = AddressOf Me.OnGetCampaignConvertionsOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignConvertions", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignConvertionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignConvertionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignConvertionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignConvertionsCompleted(Me, New GetCampaignConvertionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetCampaignBounces", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCampaignBounces(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCampaignBounces", New Object() {loginEmail, password, campaignID, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCampaignBouncesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date)
            Me.GetCampaignBouncesAsync(loginEmail, password, campaignID, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCampaignBouncesAsync(ByVal loginEmail As String, ByVal password As String, ByVal campaignID As Integer, ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetCampaignBouncesOperationCompleted Is Nothing) Then
                Me.GetCampaignBouncesOperationCompleted = AddressOf Me.OnGetCampaignBouncesOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignBounces", New Object() {loginEmail, password, campaignID, startDate, endDate}, Me.GetCampaignBouncesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCampaignBouncesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignBouncesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCampaignBouncesCompleted(Me, New GetCampaignBouncesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/AddSenderEmail", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddSenderEmail(ByVal loginEmail As String, ByVal password As String, ByVal SenderEmail As String) As Boolean
            Dim results() As Object = Me.Invoke("AddSenderEmail", New Object() {loginEmail, password, SenderEmail})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddSenderEmailAsync(ByVal loginEmail As String, ByVal password As String, ByVal SenderEmail As String)
            Me.AddSenderEmailAsync(loginEmail, password, SenderEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddSenderEmailAsync(ByVal loginEmail As String, ByVal password As String, ByVal SenderEmail As String, ByVal userState As Object)
            If (Me.AddSenderEmailOperationCompleted Is Nothing) Then
                Me.AddSenderEmailOperationCompleted = AddressOf Me.OnAddSenderEmailOperationCompleted
            End If
            Me.InvokeAsync("AddSenderEmail", New Object() {loginEmail, password, SenderEmail}, Me.AddSenderEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddSenderEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddSenderEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddSenderEmailCompleted(Me, New AddSenderEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/CreateNewAccount", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateNewAccount(ByVal loginEmail As String, ByVal loginPassword As String, ByVal newAccountName As String, ByVal newAccountEmail As String, ByVal newAccountPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateNewAccount", New Object() {loginEmail, loginPassword, newAccountName, newAccountEmail, newAccountPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateNewAccountAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal newAccountName As String, ByVal newAccountEmail As String, ByVal newAccountPassword As String)
            Me.CreateNewAccountAsync(loginEmail, loginPassword, newAccountName, newAccountEmail, newAccountPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateNewAccountAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal newAccountName As String, ByVal newAccountEmail As String, ByVal newAccountPassword As String, ByVal userState As Object)
            If (Me.CreateNewAccountOperationCompleted Is Nothing) Then
                Me.CreateNewAccountOperationCompleted = AddressOf Me.OnCreateNewAccountOperationCompleted
            End If
            Me.InvokeAsync("CreateNewAccount", New Object() {loginEmail, loginPassword, newAccountName, newAccountEmail, newAccountPassword}, Me.CreateNewAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateNewAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateNewAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateNewAccountCompleted(Me, New CreateNewAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/TransferCredit", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TransferCredit(ByVal loginEmail As String, ByVal loginPassword As String, ByVal transferToEmail As String, ByVal creditCount As Integer) As Boolean
            Dim results() As Object = Me.Invoke("TransferCredit", New Object() {loginEmail, loginPassword, transferToEmail, creditCount})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TransferCreditAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal transferToEmail As String, ByVal creditCount As Integer)
            Me.TransferCreditAsync(loginEmail, loginPassword, transferToEmail, creditCount, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TransferCreditAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal transferToEmail As String, ByVal creditCount As Integer, ByVal userState As Object)
            If (Me.TransferCreditOperationCompleted Is Nothing) Then
                Me.TransferCreditOperationCompleted = AddressOf Me.OnTransferCreditOperationCompleted
            End If
            Me.InvokeAsync("TransferCredit", New Object() {loginEmail, loginPassword, transferToEmail, creditCount}, Me.TransferCreditOperationCompleted, userState)
        End Sub
        
        Private Sub OnTransferCreditOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransferCreditCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransferCreditCompleted(Me, New TransferCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/UplodeZipFile", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UplodeZipFile(ByVal loginEmail As String, ByVal loginPassword As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal fileStream() As Byte, ByVal campaignId As Integer) As Boolean
            Dim results() As Object = Me.Invoke("UplodeZipFile", New Object() {loginEmail, loginPassword, fileStream, campaignId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UplodeZipFileAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileStream() As Byte, ByVal campaignId As Integer)
            Me.UplodeZipFileAsync(loginEmail, loginPassword, fileStream, campaignId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UplodeZipFileAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileStream() As Byte, ByVal campaignId As Integer, ByVal userState As Object)
            If (Me.UplodeZipFileOperationCompleted Is Nothing) Then
                Me.UplodeZipFileOperationCompleted = AddressOf Me.OnUplodeZipFileOperationCompleted
            End If
            Me.InvokeAsync("UplodeZipFile", New Object() {loginEmail, loginPassword, fileStream, campaignId}, Me.UplodeZipFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUplodeZipFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UplodeZipFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UplodeZipFileCompleted(Me, New UplodeZipFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/UploadContactListFile", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadContactListFile(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileType As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal myFileStream() As Byte, ByVal ContactListName As String) As String
            Dim results() As Object = Me.Invoke("UploadContactListFile", New Object() {loginEmail, loginPassword, fileType, myFileStream, ContactListName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadContactListFileAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileType As String, ByVal myFileStream() As Byte, ByVal ContactListName As String)
            Me.UploadContactListFileAsync(loginEmail, loginPassword, fileType, myFileStream, ContactListName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadContactListFileAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal fileType As String, ByVal myFileStream() As Byte, ByVal ContactListName As String, ByVal userState As Object)
            If (Me.UploadContactListFileOperationCompleted Is Nothing) Then
                Me.UploadContactListFileOperationCompleted = AddressOf Me.OnUploadContactListFileOperationCompleted
            End If
            Me.InvokeAsync("UploadContactListFile", New Object() {loginEmail, loginPassword, fileType, myFileStream, ContactListName}, Me.UploadContactListFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadContactListFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadContactListFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadContactListFileCompleted(Me, New UploadContactListFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/NameExists", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NameExists(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountName As String) As Boolean
            Dim results() As Object = Me.Invoke("NameExists", New Object() {loginEmail, APIKey, accountName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NameExistsAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountName As String)
            Me.NameExistsAsync(loginEmail, APIKey, accountName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NameExistsAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountName As String, ByVal userState As Object)
            If (Me.NameExistsOperationCompleted Is Nothing) Then
                Me.NameExistsOperationCompleted = AddressOf Me.OnNameExistsOperationCompleted
            End If
            Me.InvokeAsync("NameExists", New Object() {loginEmail, APIKey, accountName}, Me.NameExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnNameExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.NameExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NameExistsCompleted(Me, New NameExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/EmailExists", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EmailExists(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountEmail As String) As Boolean
            Dim results() As Object = Me.Invoke("EmailExists", New Object() {loginEmail, APIKey, accountEmail})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EmailExistsAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountEmail As String)
            Me.EmailExistsAsync(loginEmail, APIKey, accountEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EmailExistsAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal accountEmail As String, ByVal userState As Object)
            If (Me.EmailExistsOperationCompleted Is Nothing) Then
                Me.EmailExistsOperationCompleted = AddressOf Me.OnEmailExistsOperationCompleted
            End If
            Me.InvokeAsync("EmailExists", New Object() {loginEmail, APIKey, accountEmail}, Me.EmailExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnEmailExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.EmailExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EmailExistsCompleted(Me, New EmailExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/getCampaignID", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCampaignID(ByVal loginEmail As String, ByVal APIKey As String, ByVal CampaignName As String) As Integer
            Dim results() As Object = Me.Invoke("getCampaignID", New Object() {loginEmail, APIKey, CampaignName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCampaignIDAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal CampaignName As String)
            Me.getCampaignIDAsync(loginEmail, APIKey, CampaignName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCampaignIDAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal CampaignName As String, ByVal userState As Object)
            If (Me.getCampaignIDOperationCompleted Is Nothing) Then
                Me.getCampaignIDOperationCompleted = AddressOf Me.OngetCampaignIDOperationCompleted
            End If
            Me.InvokeAsync("getCampaignID", New Object() {loginEmail, APIKey, CampaignName}, Me.getCampaignIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCampaignIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCampaignIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCampaignIDCompleted(Me, New getCampaignIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetAccessToken", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccessToken(ByVal loginEmail As String, ByVal APIKey As String) As String
            Dim results() As Object = Me.Invoke("GetAccessToken", New Object() {loginEmail, APIKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccessTokenAsync(ByVal loginEmail As String, ByVal APIKey As String)
            Me.GetAccessTokenAsync(loginEmail, APIKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccessTokenAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal userState As Object)
            If (Me.GetAccessTokenOperationCompleted Is Nothing) Then
                Me.GetAccessTokenOperationCompleted = AddressOf Me.OnGetAccessTokenOperationCompleted
            End If
            Me.InvokeAsync("GetAccessToken", New Object() {loginEmail, APIKey}, Me.GetAccessTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccessTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccessTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccessTokenCompleted(Me, New GetAccessTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/VerifyAccessToken", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function VerifyAccessToken(ByVal emailAddress As String, ByVal token As String) As Boolean
            Dim results() As Object = Me.Invoke("VerifyAccessToken", New Object() {emailAddress, token})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VerifyAccessTokenAsync(ByVal emailAddress As String, ByVal token As String)
            Me.VerifyAccessTokenAsync(emailAddress, token, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VerifyAccessTokenAsync(ByVal emailAddress As String, ByVal token As String, ByVal userState As Object)
            If (Me.VerifyAccessTokenOperationCompleted Is Nothing) Then
                Me.VerifyAccessTokenOperationCompleted = AddressOf Me.OnVerifyAccessTokenOperationCompleted
            End If
            Me.InvokeAsync("VerifyAccessToken", New Object() {emailAddress, token}, Me.VerifyAccessTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnVerifyAccessTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.VerifyAccessTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VerifyAccessTokenCompleted(Me, New VerifyAccessTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetAPIKey", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAPIKey(ByVal loginEmail As String, ByVal loginPassword As String) As String
            Dim results() As Object = Me.Invoke("GetAPIKey", New Object() {loginEmail, loginPassword})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAPIKeyAsync(ByVal loginEmail As String, ByVal loginPassword As String)
            Me.GetAPIKeyAsync(loginEmail, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAPIKeyAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.GetAPIKeyOperationCompleted Is Nothing) Then
                Me.GetAPIKeyOperationCompleted = AddressOf Me.OnGetAPIKeyOperationCompleted
            End If
            Me.InvokeAsync("GetAPIKey", New Object() {loginEmail, loginPassword}, Me.GetAPIKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAPIKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAPIKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAPIKeyCompleted(Me, New GetAPIKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/GetAccountInfo", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountInfo(ByVal loginEmail As String, ByVal loginPassword As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAccountInfo", New Object() {loginEmail, loginPassword})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountInfoAsync(ByVal loginEmail As String, ByVal loginPassword As String)
            Me.GetAccountInfoAsync(loginEmail, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountInfoAsync(ByVal loginEmail As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.GetAccountInfoOperationCompleted Is Nothing) Then
                Me.GetAccountInfoOperationCompleted = AddressOf Me.OnGetAccountInfoOperationCompleted
            End If
            Me.InvokeAsync("GetAccountInfo", New Object() {loginEmail, loginPassword}, Me.GetAccountInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountInfoCompleted(Me, New GetAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SetCampaignDailyLimit", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCampaignDailyLimit(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal quantity As Integer) As Boolean
            Dim results() As Object = Me.Invoke("SetCampaignDailyLimit", New Object() {loginEmail, APIKey, campaignid, quantity})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCampaignDailyLimitAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal quantity As Integer)
            Me.SetCampaignDailyLimitAsync(loginEmail, APIKey, campaignid, quantity, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCampaignDailyLimitAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal quantity As Integer, ByVal userState As Object)
            If (Me.SetCampaignDailyLimitOperationCompleted Is Nothing) Then
                Me.SetCampaignDailyLimitOperationCompleted = AddressOf Me.OnSetCampaignDailyLimitOperationCompleted
            End If
            Me.InvokeAsync("SetCampaignDailyLimit", New Object() {loginEmail, APIKey, campaignid, quantity}, Me.SetCampaignDailyLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCampaignDailyLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCampaignDailyLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCampaignDailyLimitCompleted(Me, New SetCampaignDailyLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SetCampaignTimeLimit", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetCampaignTimeLimit(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal TimeSpan As String) As Boolean
            Dim results() As Object = Me.Invoke("SetCampaignTimeLimit", New Object() {loginEmail, APIKey, campaignid, TimeSpan})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetCampaignTimeLimitAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal TimeSpan As String)
            Me.SetCampaignTimeLimitAsync(loginEmail, APIKey, campaignid, TimeSpan, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetCampaignTimeLimitAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal campaignid As Integer, ByVal TimeSpan As String, ByVal userState As Object)
            If (Me.SetCampaignTimeLimitOperationCompleted Is Nothing) Then
                Me.SetCampaignTimeLimitOperationCompleted = AddressOf Me.OnSetCampaignTimeLimitOperationCompleted
            End If
            Me.InvokeAsync("SetCampaignTimeLimit", New Object() {loginEmail, APIKey, campaignid, TimeSpan}, Me.SetCampaignTimeLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetCampaignTimeLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetCampaignTimeLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetCampaignTimeLimitCompleted(Me, New SetCampaignTimeLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://service.reasonablespread.com/SplitContactListByRange", RequestNamespace:="http://service.reasonablespread.com/", ResponseNamespace:="http://service.reasonablespread.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SplitContactListByRange(ByVal loginEmail As String, ByVal APIKey As String, ByVal SourceContactListName As String, ByVal Range As String, ByVal TargetContactListName As String) As Boolean
            Dim results() As Object = Me.Invoke("SplitContactListByRange", New Object() {loginEmail, APIKey, SourceContactListName, Range, TargetContactListName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SplitContactListByRangeAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal SourceContactListName As String, ByVal Range As String, ByVal TargetContactListName As String)
            Me.SplitContactListByRangeAsync(loginEmail, APIKey, SourceContactListName, Range, TargetContactListName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SplitContactListByRangeAsync(ByVal loginEmail As String, ByVal APIKey As String, ByVal SourceContactListName As String, ByVal Range As String, ByVal TargetContactListName As String, ByVal userState As Object)
            If (Me.SplitContactListByRangeOperationCompleted Is Nothing) Then
                Me.SplitContactListByRangeOperationCompleted = AddressOf Me.OnSplitContactListByRangeOperationCompleted
            End If
            Me.InvokeAsync("SplitContactListByRange", New Object() {loginEmail, APIKey, SourceContactListName, Range, TargetContactListName}, Me.SplitContactListByRangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnSplitContactListByRangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.SplitContactListByRangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SplitContactListByRangeCompleted(Me, New SplitContactListByRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class Campaign
        
        Private campaignNameField As String
        
        Private fromEmailField As String
        
        Private fromField As String
        
        Private subjectField As String
        
        Private contentField As String
        
        Private signatureField As String
        
        Private scheduleField As Date
        
        '''<remarks/>
        Public Property campaignName() As String
            Get
                Return Me.campaignNameField
            End Get
            Set
                Me.campaignNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property fromEmail() As String
            Get
                Return Me.fromEmailField
            End Get
            Set
                Me.fromEmailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property from() As String
            Get
                Return Me.fromField
            End Get
            Set
                Me.fromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property subject() As String
            Get
                Return Me.subjectField
            End Get
            Set
                Me.subjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property content() As String
            Get
                Return Me.contentField
            End Get
            Set
                Me.contentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property signature() As String
            Get
                Return Me.signatureField
            End Get
            Set
                Me.signatureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property schedule() As Date
            Get
                Return Me.scheduleField
            End Get
            Set
                Me.scheduleField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class server
        
        Private serverIDField As String
        
        Private hostField As String
        
        Private portField As String
        
        Private passwordField As String
        
        Private usernameField As String
        
        Private queuelengthField As String
        
        '''<remarks/>
        Public Property ServerID() As String
            Get
                Return Me.serverIDField
            End Get
            Set
                Me.serverIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Host() As String
            Get
                Return Me.hostField
            End Get
            Set
                Me.hostField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Port() As String
            Get
                Return Me.portField
            End Get
            Set
                Me.portField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Username() As String
            Get
                Return Me.usernameField
            End Get
            Set
                Me.usernameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Queuelength() As String
            Get
                Return Me.queuelengthField
            End Get
            Set
                Me.queuelengthField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class Subscriber
        
        Private emailField As String
        
        Private firstNameField As String
        
        Private middleNameField As String
        
        Private lastNameField As String
        
        Private jobTitleField As String
        
        Private companyField As String
        
        Private homePhoneField As String
        
        Private address1Field As String
        
        Private address2Field As String
        
        Private address3Field As String
        
        Private cityField As String
        
        Private stateField As String
        
        Private countryField As String
        
        Private postalCodeField As String
        
        Private subPostalCodeField As String
        
        Private faxField As String
        
        Private webUrlField As String
        
        Private titleField As String
        
        Private genderField As String
        
        Private date1Field As Date
        
        Private date2Field As Date
        
        Private customField1Field As String
        
        Private customField2Field As String
        
        Private customField3Field As String
        
        Private customField4Field As String
        
        Private customField5Field As String
        
        Private customField6Field As String
        
        Private customField7Field As String
        
        Private customField8Field As String
        
        Private customField9Field As String
        
        Private customField10Field As String
        
        Private customField11Field As String
        
        Private customField12Field As String
        
        Private customField13Field As String
        
        Private customField14Field As String
        
        Private customField15Field As String
        
        '''<remarks/>
        Public Property email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property firstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property middleName() As String
            Get
                Return Me.middleNameField
            End Get
            Set
                Me.middleNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property jobTitle() As String
            Get
                Return Me.jobTitleField
            End Get
            Set
                Me.jobTitleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property company() As String
            Get
                Return Me.companyField
            End Get
            Set
                Me.companyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property homePhone() As String
            Get
                Return Me.homePhoneField
            End Get
            Set
                Me.homePhoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address1() As String
            Get
                Return Me.address1Field
            End Get
            Set
                Me.address1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address2() As String
            Get
                Return Me.address2Field
            End Get
            Set
                Me.address2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address3() As String
            Get
                Return Me.address3Field
            End Get
            Set
                Me.address3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property city() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property state() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property country() As String
            Get
                Return Me.countryField
            End Get
            Set
                Me.countryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property postalCode() As String
            Get
                Return Me.postalCodeField
            End Get
            Set
                Me.postalCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property subPostalCode() As String
            Get
                Return Me.subPostalCodeField
            End Get
            Set
                Me.subPostalCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property fax() As String
            Get
                Return Me.faxField
            End Get
            Set
                Me.faxField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property webUrl() As String
            Get
                Return Me.webUrlField
            End Get
            Set
                Me.webUrlField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property title() As String
            Get
                Return Me.titleField
            End Get
            Set
                Me.titleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property gender() As String
            Get
                Return Me.genderField
            End Get
            Set
                Me.genderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property date1() As Date
            Get
                Return Me.date1Field
            End Get
            Set
                Me.date1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property date2() As Date
            Get
                Return Me.date2Field
            End Get
            Set
                Me.date2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField1() As String
            Get
                Return Me.customField1Field
            End Get
            Set
                Me.customField1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField2() As String
            Get
                Return Me.customField2Field
            End Get
            Set
                Me.customField2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField3() As String
            Get
                Return Me.customField3Field
            End Get
            Set
                Me.customField3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField4() As String
            Get
                Return Me.customField4Field
            End Get
            Set
                Me.customField4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField5() As String
            Get
                Return Me.customField5Field
            End Get
            Set
                Me.customField5Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField6() As String
            Get
                Return Me.customField6Field
            End Get
            Set
                Me.customField6Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField7() As String
            Get
                Return Me.customField7Field
            End Get
            Set
                Me.customField7Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField8() As String
            Get
                Return Me.customField8Field
            End Get
            Set
                Me.customField8Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField9() As String
            Get
                Return Me.customField9Field
            End Get
            Set
                Me.customField9Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField10() As String
            Get
                Return Me.customField10Field
            End Get
            Set
                Me.customField10Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField11() As String
            Get
                Return Me.customField11Field
            End Get
            Set
                Me.customField11Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField12() As String
            Get
                Return Me.customField12Field
            End Get
            Set
                Me.customField12Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField13() As String
            Get
                Return Me.customField13Field
            End Get
            Set
                Me.customField13Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField14() As String
            Get
                Return Me.customField14Field
            End Get
            Set
                Me.customField14Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customField15() As String
            Get
                Return Me.customField15Field
            End Get
            Set
                Me.customField15Field = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class CampaignReport
        
        Private campaignIdField As Integer
        
        Private campaignNameField As String
        
        Private sentCountField As Integer
        
        Private failCountField As Integer
        
        Private openCountField As Integer
        
        Private allClickCountField As Integer
        
        Private uniqueClicksCountField As Integer
        
        Private conversionCountField As Integer
        
        Private bounceCountField As Integer
        
        Private spamCountField As Integer
        
        Private unsubscribeCountField As Integer
        
        Private statusField As CampaignStatus
        
        Private dateSentField As Date
        
        '''<remarks/>
        Public Property CampaignId() As Integer
            Get
                Return Me.campaignIdField
            End Get
            Set
                Me.campaignIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CampaignName() As String
            Get
                Return Me.campaignNameField
            End Get
            Set
                Me.campaignNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SentCount() As Integer
            Get
                Return Me.sentCountField
            End Get
            Set
                Me.sentCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FailCount() As Integer
            Get
                Return Me.failCountField
            End Get
            Set
                Me.failCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OpenCount() As Integer
            Get
                Return Me.openCountField
            End Get
            Set
                Me.openCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AllClickCount() As Integer
            Get
                Return Me.allClickCountField
            End Get
            Set
                Me.allClickCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UniqueClicksCount() As Integer
            Get
                Return Me.uniqueClicksCountField
            End Get
            Set
                Me.uniqueClicksCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConversionCount() As Integer
            Get
                Return Me.conversionCountField
            End Get
            Set
                Me.conversionCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BounceCount() As Integer
            Get
                Return Me.bounceCountField
            End Get
            Set
                Me.bounceCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpamCount() As Integer
            Get
                Return Me.spamCountField
            End Get
            Set
                Me.spamCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UnsubscribeCount() As Integer
            Get
                Return Me.unsubscribeCountField
            End Get
            Set
                Me.unsubscribeCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As CampaignStatus
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DateSent() As Date
            Get
                Return Me.dateSentField
            End Get
            Set
                Me.dateSentField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Public Enum CampaignStatus
        
        '''<remarks/>
        Inexistent
        
        '''<remarks/>
        Deleted
        
        '''<remarks/>
        Sent
        
        '''<remarks/>
        Draft
        
        '''<remarks/>
        Pause
        
        '''<remarks/>
        Sending
        
        '''<remarks/>
        Waiting
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Partial Public Class CampaignCreatives
        
        Private subjectField As String
        
        Private displayNameField As String
        
        Private fromAddressField As String
        
        Private replyToField As String
        
        Private creativeContentField As String
        
        Private targetField As String
        
        Private isCampaignDefaultField As Boolean
        
        '''<remarks/>
        Public Property subject() As String
            Get
                Return Me.subjectField
            End Get
            Set
                Me.subjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property displayName() As String
            Get
                Return Me.displayNameField
            End Get
            Set
                Me.displayNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property fromAddress() As String
            Get
                Return Me.fromAddressField
            End Get
            Set
                Me.fromAddressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property replyTo() As String
            Get
                Return Me.replyToField
            End Get
            Set
                Me.replyToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property creativeContent() As String
            Get
                Return Me.creativeContentField
            End Get
            Set
                Me.creativeContentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property target() As String
            Get
                Return Me.targetField
            End Get
            Set
                Me.targetField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isCampaignDefault() As Boolean
            Get
                Return Me.isCampaignDefaultField
            End Get
            Set
                Me.isCampaignDefaultField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Public Enum SubscriptionStatus
        
        '''<remarks/>
        Any
        
        '''<remarks/>
        Deleted
        
        '''<remarks/>
        Active
        
        '''<remarks/>
        Invisible
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Public Enum SubscriberStatus
        
        '''<remarks/>
        Any
        
        '''<remarks/>
        Deleted
        
        '''<remarks/>
        Active
        
        '''<remarks/>
        Unsubscribed
        
        '''<remarks/>
        Unconfirmed
        
        '''<remarks/>
        Undeliverable
        
        '''<remarks/>
        SpamReporter
        
        '''<remarks/>
        DoNotMail
        
        '''<remarks/>
        Blacklist
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://service.reasonablespread.com/")>  _
    Public Enum DoubleOptIn
        
        '''<remarks/>
        ReferToUserOption
        
        '''<remarks/>
        [On]
        
        '''<remarks/>
        Off
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub createCampaignDraftCompletedEventHandler(ByVal sender As Object, ByVal e As createCampaignDraftCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCampaignDraftCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub createCampaignCompletedEventHandler(ByVal sender As Object, ByVal e As createCampaignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCampaignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub createCampaign2CompletedEventHandler(ByVal sender As Object, ByVal e As createCampaign2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createCampaign2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UpdateCampaignStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCampaignStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCampaignStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SendSMSCompletedEventHandler(ByVal sender As Object, ByVal e As SendSMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendSMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getCampaignStatusCompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CampaignStatus
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CampaignStatus)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getCampaignReportCompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CampaignReport
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CampaignReport)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ChangePublishStatusCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getAllSubscriptionCompletedEventHandler(ByVal sender As Object, ByVal e As getAllSubscriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAllSubscriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getSubscriptionCompletedEventHandler(ByVal sender As Object, ByVal e As getSubscriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSubscriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getSubscriptions2StringCompletedEventHandler(ByVal sender As Object, ByVal e As getSubscriptions2StringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSubscriptions2StringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSubscribersCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubscribersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub createSubscriptionCompletedEventHandler(ByVal sender As Object, ByVal e As createSubscriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createSubscriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub addSubscriberByEmailCompletedEventHandler(ByVal sender As Object, ByVal e As addSubscriberByEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addSubscriberByEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub DeleteSubscribersCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSubscribersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub addSubscriberByInfoCompletedEventHandler(ByVal sender As Object, ByVal e As addSubscriberByInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addSubscriberByInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub addSubscribersByInfoCompletedEventHandler(ByVal sender As Object, ByVal e As addSubscribersByInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addSubscribersByInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Send2CompletedEventHandler(ByVal sender As Object, ByVal e As Send2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Send2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub Send3CompletedEventHandler(ByVal sender As Object, ByVal e As Send3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Send3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SendCompletedEventHandler(ByVal sender As Object, ByVal e As SendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SendBatchCompletedEventHandler(ByVal sender As Object, ByVal e As SendBatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendBatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As server
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),server)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SearchContactsCompletedEventHandler(ByVal sender As Object, ByVal e As SearchContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SearchContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SplitContactsCompletedEventHandler(ByVal sender As Object, ByVal e As SplitContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SplitContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ExcludeContactListCompletedEventHandler(ByVal sender As Object, ByVal e As ExcludeContactListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExcludeContactListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCampaignSentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignSentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignSentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCampaignOpensCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignOpensCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignOpensCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCampaignClicksCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignClicksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignClicksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCampaignUnsubscribesCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignUnsubscribesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignUnsubscribesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCampaignAbusesCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignAbusesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignAbusesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCampaignConversionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignConversionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignConversionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCampaignConvertionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignConvertionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignConvertionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCampaignBouncesCompletedEventHandler(ByVal sender As Object, ByVal e As GetCampaignBouncesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCampaignBouncesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub AddSenderEmailCompletedEventHandler(ByVal sender As Object, ByVal e As AddSenderEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddSenderEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub CreateNewAccountCompletedEventHandler(ByVal sender As Object, ByVal e As CreateNewAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateNewAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub TransferCreditCompletedEventHandler(ByVal sender As Object, ByVal e As TransferCreditCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransferCreditCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UplodeZipFileCompletedEventHandler(ByVal sender As Object, ByVal e As UplodeZipFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UplodeZipFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub UploadContactListFileCompletedEventHandler(ByVal sender As Object, ByVal e As UploadContactListFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadContactListFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub NameExistsCompletedEventHandler(ByVal sender As Object, ByVal e As NameExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NameExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub EmailExistsCompletedEventHandler(ByVal sender As Object, ByVal e As EmailExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EmailExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub getCampaignIDCompletedEventHandler(ByVal sender As Object, ByVal e As getCampaignIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCampaignIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAccessTokenCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccessTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccessTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub VerifyAccessTokenCompletedEventHandler(ByVal sender As Object, ByVal e As VerifyAccessTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VerifyAccessTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAPIKeyCompletedEventHandler(ByVal sender As Object, ByVal e As GetAPIKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAPIKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetAccountInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCampaignDailyLimitCompletedEventHandler(ByVal sender As Object, ByVal e As SetCampaignDailyLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCampaignDailyLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SetCampaignTimeLimitCompletedEventHandler(ByVal sender As Object, ByVal e As SetCampaignTimeLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetCampaignTimeLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub SplitContactListByRangeCompletedEventHandler(ByVal sender As Object, ByVal e As SplitContactListByRangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SplitContactListByRangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
