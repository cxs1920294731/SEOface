'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1008
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1008.
'
Namespace IntrawWebService
    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code"),
            System.Web.Services.WebServiceBindingAttribute(Name := "ServiceSoap", [Namespace] := "http://tempuri.org/")>
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol

        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback

        Private TryAuthOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetServerSettingsOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetAllServerSettingsOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetDeliveryDomainSettingsOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetUserDeliveryDomainSettingsOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetEngineServersOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetDomainPreferredServersOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateServerActiveOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetCampaignSubscribersOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetActiveCampaignSubscribersOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetHeaderFooterOperationCompleted As System.Threading.SendOrPostCallback

        Private CompleteBatchOperationCompleted As System.Threading.SendOrPostCallback

        Private BatchUpdateCampaignCategorySubscriberOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateEmailSentOperationCompleted As System.Threading.SendOrPostCallback

        Private BatchUpdateFailedSentLogOperationCompleted As System.Threading.SendOrPostCallback

        Private BatchUpdateSMSTransLogOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateServerStatusOperationCompleted As System.Threading.SendOrPostCallback

        Private UpdateServerStatusRPCOperationCompleted As System.Threading.SendOrPostCallback

        Private HealthCheckOperationCompleted As System.Threading.SendOrPostCallback

        Private GetUserTimezoneIndexOperationCompleted As System.Threading.SendOrPostCallback

        Private GetUserReturnPathOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetUserDomainsOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetUserReturnPathsOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetUserSettingsOperationCompleted As System.Threading.SendOrPostCallback

        Private GetAliveServerOperationCompleted As System.Threading.SendOrPostCallback

        Private GetCampaignSentCountOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetCampaignLinksOperationCompleted As System.Threading.SendOrPostCallback

        Private AddNewCampaignLinkOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetActiveSMSCampaignSubscribersOperationCompleted As System.Threading.SendOrPostCallback

        Private CompleteSMSCampaignOperationCompleted As System.Threading.SendOrPostCallback

        Private UnsubscribePhoneOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetServersInGroupOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetCampaignCreativesOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetURLTrackingsOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetCategoryTrackingsOperationCompleted As System.Threading.SendOrPostCallback

        Private CompleteWhatsAppCampaignOperationCompleted As System.Threading.SendOrPostCallback

        Private UploadWhatsAppStatusOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetActiveWhatsAppCampaignSubscribersOperationCompleted As System.Threading.SendOrPostCallback

        Private dsGetActiveWhatsAppChannelOperationCompleted As System.Threading.SendOrPostCallback

        Private SetWhatsAppStatusOperationCompleted As System.Threading.SendOrPostCallback

        Private GetAccountLangOperationCompleted As System.Threading.SendOrPostCallback

        Private useDefaultCredentialsSetExplicitly As Boolean

        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EmailAlerter.My.MySettings.Default.EmailAlerter_com_reasonablespread_iws_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub

        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true) _
                     AndAlso (Me.useDefaultCredentialsSetExplicitly = false)) _
                    AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property

        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property

        '''<remarks/>
            Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler

        '''<remarks/>
            Public Event TryAuthCompleted As TryAuthCompletedEventHandler

        '''<remarks/>
            Public Event dsGetServerSettingsCompleted As dsGetServerSettingsCompletedEventHandler

        '''<remarks/>
            Public Event dsGetAllServerSettingsCompleted As dsGetAllServerSettingsCompletedEventHandler

        '''<remarks/>
            Public Event dsGetDeliveryDomainSettingsCompleted As dsGetDeliveryDomainSettingsCompletedEventHandler

        '''<remarks/>
            Public Event dsGetUserDeliveryDomainSettingsCompleted As _
            dsGetUserDeliveryDomainSettingsCompletedEventHandler

        '''<remarks/>
            Public Event dsGetEngineServersCompleted As dsGetEngineServersCompletedEventHandler

        '''<remarks/>
            Public Event dsGetDomainPreferredServersCompleted As dsGetDomainPreferredServersCompletedEventHandler

        '''<remarks/>
            Public Event UpdateServerActiveCompleted As UpdateServerActiveCompletedEventHandler

        '''<remarks/>
            Public Event dsGetCampaignSubscribersCompleted As dsGetCampaignSubscribersCompletedEventHandler

        '''<remarks/>
            Public Event dsGetActiveCampaignSubscribersCompleted As dsGetActiveCampaignSubscribersCompletedEventHandler

        '''<remarks/>
            Public Event dsGetHeaderFooterCompleted As dsGetHeaderFooterCompletedEventHandler

        '''<remarks/>
            Public Event CompleteBatchCompleted As CompleteBatchCompletedEventHandler

        '''<remarks/>
            Public Event BatchUpdateCampaignCategorySubscriberCompleted As _
            BatchUpdateCampaignCategorySubscriberCompletedEventHandler

        '''<remarks/>
            Public Event UpdateEmailSentCompleted As UpdateEmailSentCompletedEventHandler

        '''<remarks/>
            Public Event BatchUpdateFailedSentLogCompleted As BatchUpdateFailedSentLogCompletedEventHandler

        '''<remarks/>
            Public Event BatchUpdateSMSTransLogCompleted As BatchUpdateSMSTransLogCompletedEventHandler

        '''<remarks/>
            Public Event UpdateServerStatusCompleted As UpdateServerStatusCompletedEventHandler

        '''<remarks/>
            Public Event UpdateServerStatusRPCCompleted As UpdateServerStatusRPCCompletedEventHandler

        '''<remarks/>
            Public Event HealthCheckCompleted As HealthCheckCompletedEventHandler

        '''<remarks/>
            Public Event GetUserTimezoneIndexCompleted As GetUserTimezoneIndexCompletedEventHandler

        '''<remarks/>
            Public Event GetUserReturnPathCompleted As GetUserReturnPathCompletedEventHandler

        '''<remarks/>
            Public Event dsGetUserDomainsCompleted As dsGetUserDomainsCompletedEventHandler

        '''<remarks/>
            Public Event dsGetUserReturnPathsCompleted As dsGetUserReturnPathsCompletedEventHandler

        '''<remarks/>
            Public Event dsGetUserSettingsCompleted As dsGetUserSettingsCompletedEventHandler

        '''<remarks/>
            Public Event GetAliveServerCompleted As GetAliveServerCompletedEventHandler

        '''<remarks/>
            Public Event GetCampaignSentCountCompleted As GetCampaignSentCountCompletedEventHandler

        '''<remarks/>
            Public Event dsGetCampaignLinksCompleted As dsGetCampaignLinksCompletedEventHandler

        '''<remarks/>
            Public Event AddNewCampaignLinkCompleted As AddNewCampaignLinkCompletedEventHandler

        '''<remarks/>
            Public Event dsGetActiveSMSCampaignSubscribersCompleted As _
            dsGetActiveSMSCampaignSubscribersCompletedEventHandler

        '''<remarks/>
            Public Event CompleteSMSCampaignCompleted As CompleteSMSCampaignCompletedEventHandler

        '''<remarks/>
            Public Event UnsubscribePhoneCompleted As UnsubscribePhoneCompletedEventHandler

        '''<remarks/>
            Public Event dsGetServersInGroupCompleted As dsGetServersInGroupCompletedEventHandler

        '''<remarks/>
            Public Event dsGetCampaignCreativesCompleted As dsGetCampaignCreativesCompletedEventHandler

        '''<remarks/>
            Public Event dsGetURLTrackingsCompleted As dsGetURLTrackingsCompletedEventHandler

        '''<remarks/>
            Public Event dsGetCategoryTrackingsCompleted As dsGetCategoryTrackingsCompletedEventHandler

        '''<remarks/>
            Public Event CompleteWhatsAppCampaignCompleted As CompleteWhatsAppCampaignCompletedEventHandler

        '''<remarks/>
            Public Event UploadWhatsAppStatusCompleted As UploadWhatsAppStatusCompletedEventHandler

        '''<remarks/>
            Public Event dsGetActiveWhatsAppCampaignSubscribersCompleted As _
            dsGetActiveWhatsAppCampaignSubscribersCompletedEventHandler

        '''<remarks/>
            Public Event dsGetActiveWhatsAppChannelCompleted As dsGetActiveWhatsAppChannelCompletedEventHandler

        '''<remarks/>
            Public Event SetWhatsAppStatusCompleted As SetWhatsAppStatusCompletedEventHandler

        '''<remarks/>
            Public Event GetAccountLangCompleted As GetAccountLangCompletedEventHandler

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/HelloWorld", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(- 1) {})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(- 1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub

        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    HelloWorldCompleted(Me,
                                        New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                         invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/TryAuth", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function TryAuth(ByVal APIKey As String) As Boolean
            Dim results() As Object = Me.Invoke("TryAuth", New Object() {APIKey})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub TryAuthAsync(ByVal APIKey As String)
            Me.TryAuthAsync(APIKey, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub TryAuthAsync(ByVal APIKey As String, ByVal userState As Object)
            If (Me.TryAuthOperationCompleted Is Nothing) Then
                Me.TryAuthOperationCompleted = AddressOf Me.OnTryAuthOperationCompleted
            End If
            Me.InvokeAsync("TryAuth", New Object() {APIKey}, Me.TryAuthOperationCompleted, userState)
        End Sub

        Private Sub OnTryAuthOperationCompleted(ByVal arg As Object)
            If (Not (Me.TryAuthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    TryAuthCompleted(Me,
                                     New TryAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                   invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetServerSettings", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetServerSettings(ByVal APIKey As String, ByVal ServerID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetServerSettings", New Object() {APIKey, ServerID})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetServerSettingsAsync(ByVal APIKey As String, ByVal ServerID As Integer)
            Me.dsGetServerSettingsAsync(APIKey, ServerID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetServerSettingsAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                      ByVal userState As Object)
            If (Me.dsGetServerSettingsOperationCompleted Is Nothing) Then
                Me.dsGetServerSettingsOperationCompleted = AddressOf Me.OndsGetServerSettingsOperationCompleted
            End If
            Me.InvokeAsync("dsGetServerSettings", New Object() {APIKey, ServerID},
                           Me.dsGetServerSettingsOperationCompleted, userState)
        End Sub

        Private Sub OndsGetServerSettingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetServerSettingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetServerSettingsCompleted(Me,
                                                 New dsGetServerSettingsCompletedEventArgs(invokeArgs.Results,
                                                                                           invokeArgs.Error,
                                                                                           invokeArgs.Cancelled,
                                                                                           invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetAllServerSettings", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetAllServerSettings(ByVal APIKey As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetAllServerSettings", New Object() {APIKey})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetAllServerSettingsAsync(ByVal APIKey As String)
            Me.dsGetAllServerSettingsAsync(APIKey, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetAllServerSettingsAsync(ByVal APIKey As String, ByVal userState As Object)
            If (Me.dsGetAllServerSettingsOperationCompleted Is Nothing) Then
                Me.dsGetAllServerSettingsOperationCompleted = AddressOf Me.OndsGetAllServerSettingsOperationCompleted
            End If
            Me.InvokeAsync("dsGetAllServerSettings", New Object() {APIKey}, Me.dsGetAllServerSettingsOperationCompleted,
                           userState)
        End Sub

        Private Sub OndsGetAllServerSettingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetAllServerSettingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetAllServerSettingsCompleted(Me,
                                                    New dsGetAllServerSettingsCompletedEventArgs(invokeArgs.Results,
                                                                                                 invokeArgs.Error,
                                                                                                 invokeArgs.Cancelled,
                                                                                                 invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetDeliveryDomainSettings", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetDeliveryDomainSettings(ByVal APIKey As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetDeliveryDomainSettings", New Object() {APIKey})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetDeliveryDomainSettingsAsync(ByVal APIKey As String)
            Me.dsGetDeliveryDomainSettingsAsync(APIKey, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetDeliveryDomainSettingsAsync(ByVal APIKey As String, ByVal userState As Object)
            If (Me.dsGetDeliveryDomainSettingsOperationCompleted Is Nothing) Then
                Me.dsGetDeliveryDomainSettingsOperationCompleted =
                    AddressOf Me.OndsGetDeliveryDomainSettingsOperationCompleted
            End If
            Me.InvokeAsync("dsGetDeliveryDomainSettings", New Object() {APIKey},
                           Me.dsGetDeliveryDomainSettingsOperationCompleted, userState)
        End Sub

        Private Sub OndsGetDeliveryDomainSettingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetDeliveryDomainSettingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetDeliveryDomainSettingsCompleted(Me,
                                                         New dsGetDeliveryDomainSettingsCompletedEventArgs(
                                                             invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                             invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetUserDeliveryDomainSettings", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetUserDeliveryDomainSettings(ByVal APIKey As String, ByVal UserID As Integer) _
            As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetUserDeliveryDomainSettings", New Object() {APIKey, UserID})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetUserDeliveryDomainSettingsAsync(ByVal APIKey As String, ByVal UserID As Integer)
            Me.dsGetUserDeliveryDomainSettingsAsync(APIKey, UserID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetUserDeliveryDomainSettingsAsync(ByVal APIKey As String, ByVal UserID As Integer,
                                                                  ByVal userState As Object)
            If (Me.dsGetUserDeliveryDomainSettingsOperationCompleted Is Nothing) Then
                Me.dsGetUserDeliveryDomainSettingsOperationCompleted =
                    AddressOf Me.OndsGetUserDeliveryDomainSettingsOperationCompleted
            End If
            Me.InvokeAsync("dsGetUserDeliveryDomainSettings", New Object() {APIKey, UserID},
                           Me.dsGetUserDeliveryDomainSettingsOperationCompleted, userState)
        End Sub

        Private Sub OndsGetUserDeliveryDomainSettingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetUserDeliveryDomainSettingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetUserDeliveryDomainSettingsCompleted(Me,
                                                             New dsGetUserDeliveryDomainSettingsCompletedEventArgs(
                                                                 invokeArgs.Results, invokeArgs.Error,
                                                                 invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetEngineServers", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetEngineServers(ByVal APIKey As String, ByVal EngineID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetEngineServers", New Object() {APIKey, EngineID})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetEngineServersAsync(ByVal APIKey As String, ByVal EngineID As Integer)
            Me.dsGetEngineServersAsync(APIKey, EngineID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetEngineServersAsync(ByVal APIKey As String, ByVal EngineID As Integer,
                                                     ByVal userState As Object)
            If (Me.dsGetEngineServersOperationCompleted Is Nothing) Then
                Me.dsGetEngineServersOperationCompleted = AddressOf Me.OndsGetEngineServersOperationCompleted
            End If
            Me.InvokeAsync("dsGetEngineServers", New Object() {APIKey, EngineID},
                           Me.dsGetEngineServersOperationCompleted, userState)
        End Sub

        Private Sub OndsGetEngineServersOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetEngineServersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetEngineServersCompleted(Me,
                                                New dsGetEngineServersCompletedEventArgs(invokeArgs.Results,
                                                                                         invokeArgs.Error,
                                                                                         invokeArgs.Cancelled,
                                                                                         invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetDomainPreferredServers", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetDomainPreferredServers(ByVal APIKey As String, ByVal UserId As Integer,
                                                    ByVal EngineID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetDomainPreferredServers", New Object() {APIKey, UserId, EngineID})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetDomainPreferredServersAsync(ByVal APIKey As String, ByVal UserId As Integer,
                                                              ByVal EngineID As Integer)
            Me.dsGetDomainPreferredServersAsync(APIKey, UserId, EngineID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetDomainPreferredServersAsync(ByVal APIKey As String, ByVal UserId As Integer,
                                                              ByVal EngineID As Integer, ByVal userState As Object)
            If (Me.dsGetDomainPreferredServersOperationCompleted Is Nothing) Then
                Me.dsGetDomainPreferredServersOperationCompleted =
                    AddressOf Me.OndsGetDomainPreferredServersOperationCompleted
            End If
            Me.InvokeAsync("dsGetDomainPreferredServers", New Object() {APIKey, UserId, EngineID},
                           Me.dsGetDomainPreferredServersOperationCompleted, userState)
        End Sub

        Private Sub OndsGetDomainPreferredServersOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetDomainPreferredServersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetDomainPreferredServersCompleted(Me,
                                                         New dsGetDomainPreferredServersCompletedEventArgs(
                                                             invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                             invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/UpdateServerActive", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdateServerActive(ByVal APIKey As String, ByVal ServerID As Integer, ByVal isActive As Boolean)
            Me.Invoke("UpdateServerActive", New Object() {APIKey, ServerID, isActive})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateServerActiveAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                     ByVal isActive As Boolean)
            Me.UpdateServerActiveAsync(APIKey, ServerID, isActive, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateServerActiveAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                     ByVal isActive As Boolean, ByVal userState As Object)
            If (Me.UpdateServerActiveOperationCompleted Is Nothing) Then
                Me.UpdateServerActiveOperationCompleted = AddressOf Me.OnUpdateServerActiveOperationCompleted
            End If
            Me.InvokeAsync("UpdateServerActive", New Object() {APIKey, ServerID, isActive},
                           Me.UpdateServerActiveOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateServerActiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateServerActiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    UpdateServerActiveCompleted(Me,
                                                New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                                  invokeArgs.Cancelled,
                                                                                                  invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetCampaignSubscribers", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetCampaignSubscribers(ByVal APIKey As String, ByVal ServerID As Integer,
                                                 ByVal Preplan As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetCampaignSubscribers", New Object() {APIKey, ServerID, Preplan})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetCampaignSubscribersAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                           ByVal Preplan As Boolean)
            Me.dsGetCampaignSubscribersAsync(APIKey, ServerID, Preplan, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetCampaignSubscribersAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                           ByVal Preplan As Boolean, ByVal userState As Object)
            If (Me.dsGetCampaignSubscribersOperationCompleted Is Nothing) Then
                Me.dsGetCampaignSubscribersOperationCompleted =
                    AddressOf Me.OndsGetCampaignSubscribersOperationCompleted
            End If
            Me.InvokeAsync("dsGetCampaignSubscribers", New Object() {APIKey, ServerID, Preplan},
                           Me.dsGetCampaignSubscribersOperationCompleted, userState)
        End Sub

        Private Sub OndsGetCampaignSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetCampaignSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetCampaignSubscribersCompleted(Me,
                                                      New dsGetCampaignSubscribersCompletedEventArgs(invokeArgs.Results,
                                                                                                     invokeArgs.Error,
                                                                                                     invokeArgs.
                                                                                                        Cancelled,
                                                                                                     invokeArgs.
                                                                                                        UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetActiveCampaignSubscribers", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetActiveCampaignSubscribers(ByVal APIKey As String, ByVal ServerID As Integer,
                                                       ByVal Preplan As Boolean, ByVal GetQuantity As Integer) _
            As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetActiveCampaignSubscribers",
                                                New Object() {APIKey, ServerID, Preplan, GetQuantity})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetActiveCampaignSubscribersAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                                 ByVal Preplan As Boolean, ByVal GetQuantity As Integer)
            Me.dsGetActiveCampaignSubscribersAsync(APIKey, ServerID, Preplan, GetQuantity, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetActiveCampaignSubscribersAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                                 ByVal Preplan As Boolean, ByVal GetQuantity As Integer,
                                                                 ByVal userState As Object)
            If (Me.dsGetActiveCampaignSubscribersOperationCompleted Is Nothing) Then
                Me.dsGetActiveCampaignSubscribersOperationCompleted =
                    AddressOf Me.OndsGetActiveCampaignSubscribersOperationCompleted
            End If
            Me.InvokeAsync("dsGetActiveCampaignSubscribers", New Object() {APIKey, ServerID, Preplan, GetQuantity},
                           Me.dsGetActiveCampaignSubscribersOperationCompleted, userState)
        End Sub

        Private Sub OndsGetActiveCampaignSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetActiveCampaignSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetActiveCampaignSubscribersCompleted(Me,
                                                            New dsGetActiveCampaignSubscribersCompletedEventArgs(
                                                                invokeArgs.Results, invokeArgs.Error,
                                                                invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetHeaderFooter", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetHeaderFooter(ByVal APIKey As String, ByVal UserID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetHeaderFooter", New Object() {APIKey, UserID})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetHeaderFooterAsync(ByVal APIKey As String, ByVal UserID As Integer)
            Me.dsGetHeaderFooterAsync(APIKey, UserID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetHeaderFooterAsync(ByVal APIKey As String, ByVal UserID As Integer,
                                                    ByVal userState As Object)
            If (Me.dsGetHeaderFooterOperationCompleted Is Nothing) Then
                Me.dsGetHeaderFooterOperationCompleted = AddressOf Me.OndsGetHeaderFooterOperationCompleted
            End If
            Me.InvokeAsync("dsGetHeaderFooter", New Object() {APIKey, UserID}, Me.dsGetHeaderFooterOperationCompleted,
                           userState)
        End Sub

        Private Sub OndsGetHeaderFooterOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetHeaderFooterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetHeaderFooterCompleted(Me,
                                               New dsGetHeaderFooterCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/CompleteBatch", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function CompleteBatch(ByVal APIKey As String, ByVal ServerID As Integer, ByVal CampaignID As Integer,
                                      ByVal BeginSubscriberID As Integer) As Integer
            Dim results() As Object = Me.Invoke("CompleteBatch",
                                                New Object() {APIKey, ServerID, CampaignID, BeginSubscriberID})
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub CompleteBatchAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                ByVal CampaignID As Integer, ByVal BeginSubscriberID As Integer)
            Me.CompleteBatchAsync(APIKey, ServerID, CampaignID, BeginSubscriberID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CompleteBatchAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                ByVal CampaignID As Integer, ByVal BeginSubscriberID As Integer,
                                                ByVal userState As Object)
            If (Me.CompleteBatchOperationCompleted Is Nothing) Then
                Me.CompleteBatchOperationCompleted = AddressOf Me.OnCompleteBatchOperationCompleted
            End If
            Me.InvokeAsync("CompleteBatch", New Object() {APIKey, ServerID, CampaignID, BeginSubscriberID},
                           Me.CompleteBatchOperationCompleted, userState)
        End Sub

        Private Sub OnCompleteBatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompleteBatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    CompleteBatchCompleted(Me,
                                           New CompleteBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                               invokeArgs.Cancelled,
                                                                               invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/BatchUpdateCampaignCategorySubscriber", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function BatchUpdateCampaignCategorySubscriber(ByVal APIKey As String,
                                                              ByVal SentLog As System.Data.DataTable,
                                                              ByVal BulkCopy As Boolean, ByVal BatchSize As Integer) _
            As Boolean
            Dim results() As Object = Me.Invoke("BatchUpdateCampaignCategorySubscriber",
                                                New Object() {APIKey, SentLog, BulkCopy, BatchSize})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub BatchUpdateCampaignCategorySubscriberAsync(ByVal APIKey As String,
                                                                        ByVal SentLog As System.Data.DataTable,
                                                                        ByVal BulkCopy As Boolean,
                                                                        ByVal BatchSize As Integer)
            Me.BatchUpdateCampaignCategorySubscriberAsync(APIKey, SentLog, BulkCopy, BatchSize, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub BatchUpdateCampaignCategorySubscriberAsync(ByVal APIKey As String,
                                                                        ByVal SentLog As System.Data.DataTable,
                                                                        ByVal BulkCopy As Boolean,
                                                                        ByVal BatchSize As Integer,
                                                                        ByVal userState As Object)
            If (Me.BatchUpdateCampaignCategorySubscriberOperationCompleted Is Nothing) Then
                Me.BatchUpdateCampaignCategorySubscriberOperationCompleted =
                    AddressOf Me.OnBatchUpdateCampaignCategorySubscriberOperationCompleted
            End If
            Me.InvokeAsync("BatchUpdateCampaignCategorySubscriber", New Object() {APIKey, SentLog, BulkCopy, BatchSize},
                           Me.BatchUpdateCampaignCategorySubscriberOperationCompleted, userState)
        End Sub

        Private Sub OnBatchUpdateCampaignCategorySubscriberOperationCompleted(ByVal arg As Object)
            If (Not (Me.BatchUpdateCampaignCategorySubscriberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    BatchUpdateCampaignCategorySubscriberCompleted(Me,
                                                                   New _
                                                                      BatchUpdateCampaignCategorySubscriberCompletedEventArgs(
                                                                          invokeArgs.Results, invokeArgs.Error,
                                                                          invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/UpdateEmailSent", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UpdateEmailSent(ByVal APIKey As String, ByVal campaignId As Integer, ByVal sentCount As Integer)
            Me.Invoke("UpdateEmailSent", New Object() {APIKey, campaignId, sentCount})
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateEmailSentAsync(ByVal APIKey As String, ByVal campaignId As Integer,
                                                  ByVal sentCount As Integer)
            Me.UpdateEmailSentAsync(APIKey, campaignId, sentCount, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateEmailSentAsync(ByVal APIKey As String, ByVal campaignId As Integer,
                                                  ByVal sentCount As Integer, ByVal userState As Object)
            If (Me.UpdateEmailSentOperationCompleted Is Nothing) Then
                Me.UpdateEmailSentOperationCompleted = AddressOf Me.OnUpdateEmailSentOperationCompleted
            End If
            Me.InvokeAsync("UpdateEmailSent", New Object() {APIKey, campaignId, sentCount},
                           Me.UpdateEmailSentOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateEmailSentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateEmailSentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    UpdateEmailSentCompleted(Me,
                                             New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                               invokeArgs.Cancelled,
                                                                                               invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/BatchUpdateFailedSentLog", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function BatchUpdateFailedSentLog(ByVal APIKey As String, ByVal FailedSentLog As System.Data.DataTable,
                                                 ByVal BulkCopy As Boolean, ByVal BatchSize As Integer) As Boolean
            Dim results() As Object = Me.Invoke("BatchUpdateFailedSentLog",
                                                New Object() {APIKey, FailedSentLog, BulkCopy, BatchSize})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub BatchUpdateFailedSentLogAsync(ByVal APIKey As String,
                                                           ByVal FailedSentLog As System.Data.DataTable,
                                                           ByVal BulkCopy As Boolean, ByVal BatchSize As Integer)
            Me.BatchUpdateFailedSentLogAsync(APIKey, FailedSentLog, BulkCopy, BatchSize, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub BatchUpdateFailedSentLogAsync(ByVal APIKey As String,
                                                           ByVal FailedSentLog As System.Data.DataTable,
                                                           ByVal BulkCopy As Boolean, ByVal BatchSize As Integer,
                                                           ByVal userState As Object)
            If (Me.BatchUpdateFailedSentLogOperationCompleted Is Nothing) Then
                Me.BatchUpdateFailedSentLogOperationCompleted =
                    AddressOf Me.OnBatchUpdateFailedSentLogOperationCompleted
            End If
            Me.InvokeAsync("BatchUpdateFailedSentLog", New Object() {APIKey, FailedSentLog, BulkCopy, BatchSize},
                           Me.BatchUpdateFailedSentLogOperationCompleted, userState)
        End Sub

        Private Sub OnBatchUpdateFailedSentLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.BatchUpdateFailedSentLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    BatchUpdateFailedSentLogCompleted(Me,
                                                      New BatchUpdateFailedSentLogCompletedEventArgs(invokeArgs.Results,
                                                                                                     invokeArgs.Error,
                                                                                                     invokeArgs.
                                                                                                        Cancelled,
                                                                                                     invokeArgs.
                                                                                                        UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/BatchUpdateSMSTransLog", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function BatchUpdateSMSTransLog(ByVal APIKey As String, ByVal SMSTransLog As System.Data.DataTable,
                                               ByVal BulkCopy As Boolean, ByVal BatchSize As Integer) As Boolean
            Dim results() As Object = Me.Invoke("BatchUpdateSMSTransLog",
                                                New Object() {APIKey, SMSTransLog, BulkCopy, BatchSize})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub BatchUpdateSMSTransLogAsync(ByVal APIKey As String,
                                                         ByVal SMSTransLog As System.Data.DataTable,
                                                         ByVal BulkCopy As Boolean, ByVal BatchSize As Integer)
            Me.BatchUpdateSMSTransLogAsync(APIKey, SMSTransLog, BulkCopy, BatchSize, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub BatchUpdateSMSTransLogAsync(ByVal APIKey As String,
                                                         ByVal SMSTransLog As System.Data.DataTable,
                                                         ByVal BulkCopy As Boolean, ByVal BatchSize As Integer,
                                                         ByVal userState As Object)
            If (Me.BatchUpdateSMSTransLogOperationCompleted Is Nothing) Then
                Me.BatchUpdateSMSTransLogOperationCompleted = AddressOf Me.OnBatchUpdateSMSTransLogOperationCompleted
            End If
            Me.InvokeAsync("BatchUpdateSMSTransLog", New Object() {APIKey, SMSTransLog, BulkCopy, BatchSize},
                           Me.BatchUpdateSMSTransLogOperationCompleted, userState)
        End Sub

        Private Sub OnBatchUpdateSMSTransLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.BatchUpdateSMSTransLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    BatchUpdateSMSTransLogCompleted(Me,
                                                    New BatchUpdateSMSTransLogCompletedEventArgs(invokeArgs.Results,
                                                                                                 invokeArgs.Error,
                                                                                                 invokeArgs.Cancelled,
                                                                                                 invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/UpdateServerStatus", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function UpdateServerStatus(ByVal APIKey As String, ByVal ServerID As Integer,
                                           ByVal FreeDiskSpaceMB As Integer, ByVal FreeDiskSpacePercent As Single,
                                           ByVal SMTPQueueLength As Integer) As Integer
            Dim results() As Object = Me.Invoke("UpdateServerStatus",
                                                New Object() _
                                                   {APIKey, ServerID, FreeDiskSpaceMB, FreeDiskSpacePercent,
                                                    SMTPQueueLength})
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub UpdateServerStatusAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                     ByVal FreeDiskSpaceMB As Integer,
                                                     ByVal FreeDiskSpacePercent As Single,
                                                     ByVal SMTPQueueLength As Integer)
            Me.UpdateServerStatusAsync(APIKey, ServerID, FreeDiskSpaceMB, FreeDiskSpacePercent, SMTPQueueLength, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateServerStatusAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                     ByVal FreeDiskSpaceMB As Integer,
                                                     ByVal FreeDiskSpacePercent As Single,
                                                     ByVal SMTPQueueLength As Integer, ByVal userState As Object)
            If (Me.UpdateServerStatusOperationCompleted Is Nothing) Then
                Me.UpdateServerStatusOperationCompleted = AddressOf Me.OnUpdateServerStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateServerStatus",
                           New Object() {APIKey, ServerID, FreeDiskSpaceMB, FreeDiskSpacePercent, SMTPQueueLength},
                           Me.UpdateServerStatusOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateServerStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateServerStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    UpdateServerStatusCompleted(Me,
                                                New UpdateServerStatusCompletedEventArgs(invokeArgs.Results,
                                                                                         invokeArgs.Error,
                                                                                         invokeArgs.Cancelled,
                                                                                         invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapRpcMethodAttribute _
                ("http://newintra.reasonables.com/UpdateServerStatusRPC", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal)>
        Public Function UpdateServerStatusRPC(ByVal APIKey As String, ByVal ServerID As Integer,
                                              ByVal FreeDiskSpaceMB As Integer, ByVal FreeDiskSpacePercent As Single,
                                              ByVal SMTPQueueLength As Integer) As Integer
            Dim results() As Object = Me.Invoke("UpdateServerStatusRPC",
                                                New Object() _
                                                   {APIKey, ServerID, FreeDiskSpaceMB, FreeDiskSpacePercent,
                                                    SMTPQueueLength})
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub UpdateServerStatusRPCAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                        ByVal FreeDiskSpaceMB As Integer,
                                                        ByVal FreeDiskSpacePercent As Single,
                                                        ByVal SMTPQueueLength As Integer)
            Me.UpdateServerStatusRPCAsync(APIKey, ServerID, FreeDiskSpaceMB, FreeDiskSpacePercent, SMTPQueueLength,
                                          Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UpdateServerStatusRPCAsync(ByVal APIKey As String, ByVal ServerID As Integer,
                                                        ByVal FreeDiskSpaceMB As Integer,
                                                        ByVal FreeDiskSpacePercent As Single,
                                                        ByVal SMTPQueueLength As Integer, ByVal userState As Object)
            If (Me.UpdateServerStatusRPCOperationCompleted Is Nothing) Then
                Me.UpdateServerStatusRPCOperationCompleted = AddressOf Me.OnUpdateServerStatusRPCOperationCompleted
            End If
            Me.InvokeAsync("UpdateServerStatusRPC",
                           New Object() {APIKey, ServerID, FreeDiskSpaceMB, FreeDiskSpacePercent, SMTPQueueLength},
                           Me.UpdateServerStatusRPCOperationCompleted, userState)
        End Sub

        Private Sub OnUpdateServerStatusRPCOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateServerStatusRPCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    UpdateServerStatusRPCCompleted(Me,
                                                   New UpdateServerStatusRPCCompletedEventArgs(invokeArgs.Results,
                                                                                               invokeArgs.Error,
                                                                                               invokeArgs.Cancelled,
                                                                                               invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/HealthCheck", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub HealthCheck()
            Me.Invoke("HealthCheck", New Object(- 1) {})
        End Sub

        '''<remarks/>
        Public Overloads Sub HealthCheckAsync()
            Me.HealthCheckAsync(Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub HealthCheckAsync(ByVal userState As Object)
            If (Me.HealthCheckOperationCompleted Is Nothing) Then
                Me.HealthCheckOperationCompleted = AddressOf Me.OnHealthCheckOperationCompleted
            End If
            Me.InvokeAsync("HealthCheck", New Object(- 1) {}, Me.HealthCheckOperationCompleted, userState)
        End Sub

        Private Sub OnHealthCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.HealthCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    HealthCheckCompleted(Me,
                                         New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                           invokeArgs.Cancelled,
                                                                                           invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/GetUserTimezoneIndex", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function GetUserTimezoneIndex(ByVal APIKey As String, ByVal UserID As Integer) As Integer
            Dim results() As Object = Me.Invoke("GetUserTimezoneIndex", New Object() {APIKey, UserID})
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub GetUserTimezoneIndexAsync(ByVal APIKey As String, ByVal UserID As Integer)
            Me.GetUserTimezoneIndexAsync(APIKey, UserID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub GetUserTimezoneIndexAsync(ByVal APIKey As String, ByVal UserID As Integer,
                                                       ByVal userState As Object)
            If (Me.GetUserTimezoneIndexOperationCompleted Is Nothing) Then
                Me.GetUserTimezoneIndexOperationCompleted = AddressOf Me.OnGetUserTimezoneIndexOperationCompleted
            End If
            Me.InvokeAsync("GetUserTimezoneIndex", New Object() {APIKey, UserID},
                           Me.GetUserTimezoneIndexOperationCompleted, userState)
        End Sub

        Private Sub OnGetUserTimezoneIndexOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserTimezoneIndexCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    GetUserTimezoneIndexCompleted(Me,
                                                  New GetUserTimezoneIndexCompletedEventArgs(invokeArgs.Results,
                                                                                             invokeArgs.Error,
                                                                                             invokeArgs.Cancelled,
                                                                                             invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/GetUserReturnPath", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function GetUserReturnPath(ByVal APIKey As String, ByVal UserID As Integer) As String
            Dim results() As Object = Me.Invoke("GetUserReturnPath", New Object() {APIKey, UserID})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub GetUserReturnPathAsync(ByVal APIKey As String, ByVal UserID As Integer)
            Me.GetUserReturnPathAsync(APIKey, UserID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub GetUserReturnPathAsync(ByVal APIKey As String, ByVal UserID As Integer,
                                                    ByVal userState As Object)
            If (Me.GetUserReturnPathOperationCompleted Is Nothing) Then
                Me.GetUserReturnPathOperationCompleted = AddressOf Me.OnGetUserReturnPathOperationCompleted
            End If
            Me.InvokeAsync("GetUserReturnPath", New Object() {APIKey, UserID}, Me.GetUserReturnPathOperationCompleted,
                           userState)
        End Sub

        Private Sub OnGetUserReturnPathOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserReturnPathCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    GetUserReturnPathCompleted(Me,
                                               New GetUserReturnPathCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetUserDomains", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetUserDomains(ByVal APIKey As String, ByVal UserID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetUserDomains", New Object() {APIKey, UserID})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetUserDomainsAsync(ByVal APIKey As String, ByVal UserID As Integer)
            Me.dsGetUserDomainsAsync(APIKey, UserID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetUserDomainsAsync(ByVal APIKey As String, ByVal UserID As Integer,
                                                   ByVal userState As Object)
            If (Me.dsGetUserDomainsOperationCompleted Is Nothing) Then
                Me.dsGetUserDomainsOperationCompleted = AddressOf Me.OndsGetUserDomainsOperationCompleted
            End If
            Me.InvokeAsync("dsGetUserDomains", New Object() {APIKey, UserID}, Me.dsGetUserDomainsOperationCompleted,
                           userState)
        End Sub

        Private Sub OndsGetUserDomainsOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetUserDomainsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetUserDomainsCompleted(Me,
                                              New dsGetUserDomainsCompletedEventArgs(invokeArgs.Results,
                                                                                     invokeArgs.Error,
                                                                                     invokeArgs.Cancelled,
                                                                                     invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetUserReturnPaths", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetUserReturnPaths(ByVal APIKey As String, ByVal UserID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetUserReturnPaths", New Object() {APIKey, UserID})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetUserReturnPathsAsync(ByVal APIKey As String, ByVal UserID As Integer)
            Me.dsGetUserReturnPathsAsync(APIKey, UserID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetUserReturnPathsAsync(ByVal APIKey As String, ByVal UserID As Integer,
                                                       ByVal userState As Object)
            If (Me.dsGetUserReturnPathsOperationCompleted Is Nothing) Then
                Me.dsGetUserReturnPathsOperationCompleted = AddressOf Me.OndsGetUserReturnPathsOperationCompleted
            End If
            Me.InvokeAsync("dsGetUserReturnPaths", New Object() {APIKey, UserID},
                           Me.dsGetUserReturnPathsOperationCompleted, userState)
        End Sub

        Private Sub OndsGetUserReturnPathsOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetUserReturnPathsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetUserReturnPathsCompleted(Me,
                                                  New dsGetUserReturnPathsCompletedEventArgs(invokeArgs.Results,
                                                                                             invokeArgs.Error,
                                                                                             invokeArgs.Cancelled,
                                                                                             invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetUserSettings", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetUserSettings(ByVal APIKey As String, ByVal UserId As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetUserSettings", New Object() {APIKey, UserId})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetUserSettingsAsync(ByVal APIKey As String, ByVal UserId As Integer)
            Me.dsGetUserSettingsAsync(APIKey, UserId, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetUserSettingsAsync(ByVal APIKey As String, ByVal UserId As Integer,
                                                    ByVal userState As Object)
            If (Me.dsGetUserSettingsOperationCompleted Is Nothing) Then
                Me.dsGetUserSettingsOperationCompleted = AddressOf Me.OndsGetUserSettingsOperationCompleted
            End If
            Me.InvokeAsync("dsGetUserSettings", New Object() {APIKey, UserId}, Me.dsGetUserSettingsOperationCompleted,
                           userState)
        End Sub

        Private Sub OndsGetUserSettingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetUserSettingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetUserSettingsCompleted(Me,
                                               New dsGetUserSettingsCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/GetAliveServer", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function GetAliveServer(ByVal APIKey As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAliveServer", New Object() {APIKey})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub GetAliveServerAsync(ByVal APIKey As String)
            Me.GetAliveServerAsync(APIKey, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub GetAliveServerAsync(ByVal APIKey As String, ByVal userState As Object)
            If (Me.GetAliveServerOperationCompleted Is Nothing) Then
                Me.GetAliveServerOperationCompleted = AddressOf Me.OnGetAliveServerOperationCompleted
            End If
            Me.InvokeAsync("GetAliveServer", New Object() {APIKey}, Me.GetAliveServerOperationCompleted, userState)
        End Sub

        Private Sub OnGetAliveServerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAliveServerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    GetAliveServerCompleted(Me,
                                            New GetAliveServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                 invokeArgs.Cancelled,
                                                                                 invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/GetCampaignSentCount", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function GetCampaignSentCount(ByVal APIKey As String, ByVal CampaignID As Integer) As Integer
            Dim results() As Object = Me.Invoke("GetCampaignSentCount", New Object() {APIKey, CampaignID})
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub GetCampaignSentCountAsync(ByVal APIKey As String, ByVal CampaignID As Integer)
            Me.GetCampaignSentCountAsync(APIKey, CampaignID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub GetCampaignSentCountAsync(ByVal APIKey As String, ByVal CampaignID As Integer,
                                                       ByVal userState As Object)
            If (Me.GetCampaignSentCountOperationCompleted Is Nothing) Then
                Me.GetCampaignSentCountOperationCompleted = AddressOf Me.OnGetCampaignSentCountOperationCompleted
            End If
            Me.InvokeAsync("GetCampaignSentCount", New Object() {APIKey, CampaignID},
                           Me.GetCampaignSentCountOperationCompleted, userState)
        End Sub

        Private Sub OnGetCampaignSentCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCampaignSentCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    GetCampaignSentCountCompleted(Me,
                                                  New GetCampaignSentCountCompletedEventArgs(invokeArgs.Results,
                                                                                             invokeArgs.Error,
                                                                                             invokeArgs.Cancelled,
                                                                                             invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetCampaignLinks", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetCampaignLinks(ByVal APIKey As String, ByVal CampaignID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetCampaignLinks", New Object() {APIKey, CampaignID})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetCampaignLinksAsync(ByVal APIKey As String, ByVal CampaignID As Integer)
            Me.dsGetCampaignLinksAsync(APIKey, CampaignID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetCampaignLinksAsync(ByVal APIKey As String, ByVal CampaignID As Integer,
                                                     ByVal userState As Object)
            If (Me.dsGetCampaignLinksOperationCompleted Is Nothing) Then
                Me.dsGetCampaignLinksOperationCompleted = AddressOf Me.OndsGetCampaignLinksOperationCompleted
            End If
            Me.InvokeAsync("dsGetCampaignLinks", New Object() {APIKey, CampaignID},
                           Me.dsGetCampaignLinksOperationCompleted, userState)
        End Sub

        Private Sub OndsGetCampaignLinksOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetCampaignLinksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetCampaignLinksCompleted(Me,
                                                New dsGetCampaignLinksCompletedEventArgs(invokeArgs.Results,
                                                                                         invokeArgs.Error,
                                                                                         invokeArgs.Cancelled,
                                                                                         invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/AddNewCampaignLink", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function AddNewCampaignLink(ByVal APIKey As String, ByVal CampaignID As Integer, ByVal URL As String) _
            As Integer
            Dim results() As Object = Me.Invoke("AddNewCampaignLink", New Object() {APIKey, CampaignID, URL})
            Return CType(results(0), Integer)
        End Function

        '''<remarks/>
        Public Overloads Sub AddNewCampaignLinkAsync(ByVal APIKey As String, ByVal CampaignID As Integer,
                                                     ByVal URL As String)
            Me.AddNewCampaignLinkAsync(APIKey, CampaignID, URL, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub AddNewCampaignLinkAsync(ByVal APIKey As String, ByVal CampaignID As Integer,
                                                     ByVal URL As String, ByVal userState As Object)
            If (Me.AddNewCampaignLinkOperationCompleted Is Nothing) Then
                Me.AddNewCampaignLinkOperationCompleted = AddressOf Me.OnAddNewCampaignLinkOperationCompleted
            End If
            Me.InvokeAsync("AddNewCampaignLink", New Object() {APIKey, CampaignID, URL},
                           Me.AddNewCampaignLinkOperationCompleted, userState)
        End Sub

        Private Sub OnAddNewCampaignLinkOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewCampaignLinkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    AddNewCampaignLinkCompleted(Me,
                                                New AddNewCampaignLinkCompletedEventArgs(invokeArgs.Results,
                                                                                         invokeArgs.Error,
                                                                                         invokeArgs.Cancelled,
                                                                                         invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetActiveSMSCampaignSubscribers", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetActiveSMSCampaignSubscribers(ByVal APIKey As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetActiveSMSCampaignSubscribers", New Object() {APIKey})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetActiveSMSCampaignSubscribersAsync(ByVal APIKey As String)
            Me.dsGetActiveSMSCampaignSubscribersAsync(APIKey, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetActiveSMSCampaignSubscribersAsync(ByVal APIKey As String, ByVal userState As Object)
            If (Me.dsGetActiveSMSCampaignSubscribersOperationCompleted Is Nothing) Then
                Me.dsGetActiveSMSCampaignSubscribersOperationCompleted =
                    AddressOf Me.OndsGetActiveSMSCampaignSubscribersOperationCompleted
            End If
            Me.InvokeAsync("dsGetActiveSMSCampaignSubscribers", New Object() {APIKey},
                           Me.dsGetActiveSMSCampaignSubscribersOperationCompleted, userState)
        End Sub

        Private Sub OndsGetActiveSMSCampaignSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetActiveSMSCampaignSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetActiveSMSCampaignSubscribersCompleted(Me,
                                                               New dsGetActiveSMSCampaignSubscribersCompletedEventArgs(
                                                                   invokeArgs.Results, invokeArgs.Error,
                                                                   invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/CompleteSMSCampaign", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub CompleteSMSCampaign(ByVal APIKey As String, ByVal CampaignID As Integer, ByVal sentCount As Integer)
            Me.Invoke("CompleteSMSCampaign", New Object() {APIKey, CampaignID, sentCount})
        End Sub

        '''<remarks/>
        Public Overloads Sub CompleteSMSCampaignAsync(ByVal APIKey As String, ByVal CampaignID As Integer,
                                                      ByVal sentCount As Integer)
            Me.CompleteSMSCampaignAsync(APIKey, CampaignID, sentCount, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CompleteSMSCampaignAsync(ByVal APIKey As String, ByVal CampaignID As Integer,
                                                      ByVal sentCount As Integer, ByVal userState As Object)
            If (Me.CompleteSMSCampaignOperationCompleted Is Nothing) Then
                Me.CompleteSMSCampaignOperationCompleted = AddressOf Me.OnCompleteSMSCampaignOperationCompleted
            End If
            Me.InvokeAsync("CompleteSMSCampaign", New Object() {APIKey, CampaignID, sentCount},
                           Me.CompleteSMSCampaignOperationCompleted, userState)
        End Sub

        Private Sub OnCompleteSMSCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompleteSMSCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    CompleteSMSCampaignCompleted(Me,
                                                 New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                                   invokeArgs.Cancelled,
                                                                                                   invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/UnsubscribePhone", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UnsubscribePhone(ByVal APIKey As String, ByVal SubscriberId As Integer)
            Me.Invoke("UnsubscribePhone", New Object() {APIKey, SubscriberId})
        End Sub

        '''<remarks/>
        Public Overloads Sub UnsubscribePhoneAsync(ByVal APIKey As String, ByVal SubscriberId As Integer)
            Me.UnsubscribePhoneAsync(APIKey, SubscriberId, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UnsubscribePhoneAsync(ByVal APIKey As String, ByVal SubscriberId As Integer,
                                                   ByVal userState As Object)
            If (Me.UnsubscribePhoneOperationCompleted Is Nothing) Then
                Me.UnsubscribePhoneOperationCompleted = AddressOf Me.OnUnsubscribePhoneOperationCompleted
            End If
            Me.InvokeAsync("UnsubscribePhone", New Object() {APIKey, SubscriberId},
                           Me.UnsubscribePhoneOperationCompleted, userState)
        End Sub

        Private Sub OnUnsubscribePhoneOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnsubscribePhoneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    UnsubscribePhoneCompleted(Me,
                                              New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                                invokeArgs.Cancelled,
                                                                                                invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetServersInGroup", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetServersInGroup(ByVal APIKey As String, ByVal GroupNum As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetServersInGroup", New Object() {APIKey, GroupNum})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetServersInGroupAsync(ByVal APIKey As String, ByVal GroupNum As Integer)
            Me.dsGetServersInGroupAsync(APIKey, GroupNum, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetServersInGroupAsync(ByVal APIKey As String, ByVal GroupNum As Integer,
                                                      ByVal userState As Object)
            If (Me.dsGetServersInGroupOperationCompleted Is Nothing) Then
                Me.dsGetServersInGroupOperationCompleted = AddressOf Me.OndsGetServersInGroupOperationCompleted
            End If
            Me.InvokeAsync("dsGetServersInGroup", New Object() {APIKey, GroupNum},
                           Me.dsGetServersInGroupOperationCompleted, userState)
        End Sub

        Private Sub OndsGetServersInGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetServersInGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetServersInGroupCompleted(Me,
                                                 New dsGetServersInGroupCompletedEventArgs(invokeArgs.Results,
                                                                                           invokeArgs.Error,
                                                                                           invokeArgs.Cancelled,
                                                                                           invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetCampaignCreatives", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetCampaignCreatives(ByVal APIKey As String, ByVal campaignID As Integer) _
            As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetCampaignCreatives", New Object() {APIKey, campaignID})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetCampaignCreativesAsync(ByVal APIKey As String, ByVal campaignID As Integer)
            Me.dsGetCampaignCreativesAsync(APIKey, campaignID, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetCampaignCreativesAsync(ByVal APIKey As String, ByVal campaignID As Integer,
                                                         ByVal userState As Object)
            If (Me.dsGetCampaignCreativesOperationCompleted Is Nothing) Then
                Me.dsGetCampaignCreativesOperationCompleted = AddressOf Me.OndsGetCampaignCreativesOperationCompleted
            End If
            Me.InvokeAsync("dsGetCampaignCreatives", New Object() {APIKey, campaignID},
                           Me.dsGetCampaignCreativesOperationCompleted, userState)
        End Sub

        Private Sub OndsGetCampaignCreativesOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetCampaignCreativesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetCampaignCreativesCompleted(Me,
                                                    New dsGetCampaignCreativesCompletedEventArgs(invokeArgs.Results,
                                                                                                 invokeArgs.Error,
                                                                                                 invokeArgs.Cancelled,
                                                                                                 invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetURLTrackings", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetURLTrackings(ByVal LoginEmail As String, ByVal APIKey As String,
                                          ByVal CampaignName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetURLTrackings", New Object() {LoginEmail, APIKey, CampaignName})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetURLTrackingsAsync(ByVal LoginEmail As String, ByVal APIKey As String,
                                                    ByVal CampaignName As String)
            Me.dsGetURLTrackingsAsync(LoginEmail, APIKey, CampaignName, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetURLTrackingsAsync(ByVal LoginEmail As String, ByVal APIKey As String,
                                                    ByVal CampaignName As String, ByVal userState As Object)
            If (Me.dsGetURLTrackingsOperationCompleted Is Nothing) Then
                Me.dsGetURLTrackingsOperationCompleted = AddressOf Me.OndsGetURLTrackingsOperationCompleted
            End If
            Me.InvokeAsync("dsGetURLTrackings", New Object() {LoginEmail, APIKey, CampaignName},
                           Me.dsGetURLTrackingsOperationCompleted, userState)
        End Sub

        Private Sub OndsGetURLTrackingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetURLTrackingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetURLTrackingsCompleted(Me,
                                               New dsGetURLTrackingsCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetCategoryTrackings", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetCategoryTrackings(ByVal LoginEmail As String, ByVal APIKey As String,
                                               ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetCategoryTrackings",
                                                New Object() {LoginEmail, APIKey, startDate, endDate})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetCategoryTrackingsAsync(ByVal LoginEmail As String, ByVal APIKey As String,
                                                         ByVal startDate As Date, ByVal endDate As Date)
            Me.dsGetCategoryTrackingsAsync(LoginEmail, APIKey, startDate, endDate, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetCategoryTrackingsAsync(ByVal LoginEmail As String, ByVal APIKey As String,
                                                         ByVal startDate As Date, ByVal endDate As Date,
                                                         ByVal userState As Object)
            If (Me.dsGetCategoryTrackingsOperationCompleted Is Nothing) Then
                Me.dsGetCategoryTrackingsOperationCompleted = AddressOf Me.OndsGetCategoryTrackingsOperationCompleted
            End If
            Me.InvokeAsync("dsGetCategoryTrackings", New Object() {LoginEmail, APIKey, startDate, endDate},
                           Me.dsGetCategoryTrackingsOperationCompleted, userState)
        End Sub

        Private Sub OndsGetCategoryTrackingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetCategoryTrackingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetCategoryTrackingsCompleted(Me,
                                                    New dsGetCategoryTrackingsCompletedEventArgs(invokeArgs.Results,
                                                                                                 invokeArgs.Error,
                                                                                                 invokeArgs.Cancelled,
                                                                                                 invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/CompleteWhatsAppCampaign", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub CompleteWhatsAppCampaign(ByVal APIKey As String, ByVal CampaignID As Integer,
                                            ByVal whatsAppChannelGroup As Integer, ByVal begin_subscriber_id As Integer,
                                            ByVal userID As Integer, ByVal sendCount As Integer,
                                            ByVal accountType As String)
            Me.Invoke("CompleteWhatsAppCampaign",
                      New Object() _
                         {APIKey, CampaignID, whatsAppChannelGroup, begin_subscriber_id, userID, sendCount, accountType})
        End Sub

        '''<remarks/>
        Public Overloads Sub CompleteWhatsAppCampaignAsync(ByVal APIKey As String, ByVal CampaignID As Integer,
                                                           ByVal whatsAppChannelGroup As Integer,
                                                           ByVal begin_subscriber_id As Integer, ByVal userID As Integer,
                                                           ByVal sendCount As Integer, ByVal accountType As String)
            Me.CompleteWhatsAppCampaignAsync(APIKey, CampaignID, whatsAppChannelGroup, begin_subscriber_id, userID,
                                             sendCount, accountType, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub CompleteWhatsAppCampaignAsync(ByVal APIKey As String, ByVal CampaignID As Integer,
                                                           ByVal whatsAppChannelGroup As Integer,
                                                           ByVal begin_subscriber_id As Integer, ByVal userID As Integer,
                                                           ByVal sendCount As Integer, ByVal accountType As String,
                                                           ByVal userState As Object)
            If (Me.CompleteWhatsAppCampaignOperationCompleted Is Nothing) Then
                Me.CompleteWhatsAppCampaignOperationCompleted =
                    AddressOf Me.OnCompleteWhatsAppCampaignOperationCompleted
            End If
            Me.InvokeAsync("CompleteWhatsAppCampaign",
                           New Object() _
                              {APIKey, CampaignID, whatsAppChannelGroup, begin_subscriber_id, userID, sendCount,
                               accountType}, Me.CompleteWhatsAppCampaignOperationCompleted, userState)
        End Sub

        Private Sub OnCompleteWhatsAppCampaignOperationCompleted(ByVal arg As Object)
            If (Not (Me.CompleteWhatsAppCampaignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    CompleteWhatsAppCampaignCompleted(Me,
                                                      New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                                        invokeArgs.
                                                                                                           Cancelled,
                                                                                                        invokeArgs.
                                                                                                           UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/UploadWhatsAppStatus", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Sub UploadWhatsAppStatus(ByVal APIKey As String, ByVal dt As System.Data.DataTable)
            Me.Invoke("UploadWhatsAppStatus", New Object() {APIKey, dt})
        End Sub

        '''<remarks/>
        Public Overloads Sub UploadWhatsAppStatusAsync(ByVal APIKey As String, ByVal dt As System.Data.DataTable)
            Me.UploadWhatsAppStatusAsync(APIKey, dt, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub UploadWhatsAppStatusAsync(ByVal APIKey As String, ByVal dt As System.Data.DataTable,
                                                       ByVal userState As Object)
            If (Me.UploadWhatsAppStatusOperationCompleted Is Nothing) Then
                Me.UploadWhatsAppStatusOperationCompleted = AddressOf Me.OnUploadWhatsAppStatusOperationCompleted
            End If
            Me.InvokeAsync("UploadWhatsAppStatus", New Object() {APIKey, dt}, Me.UploadWhatsAppStatusOperationCompleted,
                           userState)
        End Sub

        Private Sub OnUploadWhatsAppStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadWhatsAppStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    UploadWhatsAppStatusCompleted(Me,
                                                  New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                                    invokeArgs.Cancelled,
                                                                                                    invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetActiveWhatsAppCampaignSubscribers", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetActiveWhatsAppCampaignSubscribers(ByVal whatsAppChannelGroup As Integer,
                                                               ByVal APIKey As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetActiveWhatsAppCampaignSubscribers",
                                                New Object() {whatsAppChannelGroup, APIKey})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetActiveWhatsAppCampaignSubscribersAsync(ByVal whatsAppChannelGroup As Integer,
                                                                         ByVal APIKey As String)
            Me.dsGetActiveWhatsAppCampaignSubscribersAsync(whatsAppChannelGroup, APIKey, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetActiveWhatsAppCampaignSubscribersAsync(ByVal whatsAppChannelGroup As Integer,
                                                                         ByVal APIKey As String,
                                                                         ByVal userState As Object)
            If (Me.dsGetActiveWhatsAppCampaignSubscribersOperationCompleted Is Nothing) Then
                Me.dsGetActiveWhatsAppCampaignSubscribersOperationCompleted =
                    AddressOf Me.OndsGetActiveWhatsAppCampaignSubscribersOperationCompleted
            End If
            Me.InvokeAsync("dsGetActiveWhatsAppCampaignSubscribers", New Object() {whatsAppChannelGroup, APIKey},
                           Me.dsGetActiveWhatsAppCampaignSubscribersOperationCompleted, userState)
        End Sub

        Private Sub OndsGetActiveWhatsAppCampaignSubscribersOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetActiveWhatsAppCampaignSubscribersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetActiveWhatsAppCampaignSubscribersCompleted(Me,
                                                                    New _
                                                                       dsGetActiveWhatsAppCampaignSubscribersCompletedEventArgs(
                                                                           invokeArgs.Results, invokeArgs.Error,
                                                                           invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/dsGetActiveWhatsAppChannel", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function dsGetActiveWhatsAppChannel(ByVal whatsAppChannelGroup As Integer, ByVal APIKey As String) _
            As System.Data.DataSet
            Dim results() As Object = Me.Invoke("dsGetActiveWhatsAppChannel",
                                                New Object() {whatsAppChannelGroup, APIKey})
            Return CType(results(0), System.Data.DataSet)
        End Function

        '''<remarks/>
        Public Overloads Sub dsGetActiveWhatsAppChannelAsync(ByVal whatsAppChannelGroup As Integer,
                                                             ByVal APIKey As String)
            Me.dsGetActiveWhatsAppChannelAsync(whatsAppChannelGroup, APIKey, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub dsGetActiveWhatsAppChannelAsync(ByVal whatsAppChannelGroup As Integer,
                                                             ByVal APIKey As String, ByVal userState As Object)
            If (Me.dsGetActiveWhatsAppChannelOperationCompleted Is Nothing) Then
                Me.dsGetActiveWhatsAppChannelOperationCompleted =
                    AddressOf Me.OndsGetActiveWhatsAppChannelOperationCompleted
            End If
            Me.InvokeAsync("dsGetActiveWhatsAppChannel", New Object() {whatsAppChannelGroup, APIKey},
                           Me.dsGetActiveWhatsAppChannelOperationCompleted, userState)
        End Sub

        Private Sub OndsGetActiveWhatsAppChannelOperationCompleted(ByVal arg As Object)
            If (Not (Me.dsGetActiveWhatsAppChannelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    dsGetActiveWhatsAppChannelCompleted(Me,
                                                        New dsGetActiveWhatsAppChannelCompletedEventArgs(
                                                            invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                            invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/SetWhatsAppStatus", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function SetWhatsAppStatus(ByVal APIKey As String, ByVal countryCode As String, ByVal number As String,
                                          ByVal status As String) As Boolean
            Dim results() As Object = Me.Invoke("SetWhatsAppStatus", New Object() {APIKey, countryCode, number, status})
            Return CType(results(0), Boolean)
        End Function

        '''<remarks/>
        Public Overloads Sub SetWhatsAppStatusAsync(ByVal APIKey As String, ByVal countryCode As String,
                                                    ByVal number As String, ByVal status As String)
            Me.SetWhatsAppStatusAsync(APIKey, countryCode, number, status, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub SetWhatsAppStatusAsync(ByVal APIKey As String, ByVal countryCode As String,
                                                    ByVal number As String, ByVal status As String,
                                                    ByVal userState As Object)
            If (Me.SetWhatsAppStatusOperationCompleted Is Nothing) Then
                Me.SetWhatsAppStatusOperationCompleted = AddressOf Me.OnSetWhatsAppStatusOperationCompleted
            End If
            Me.InvokeAsync("SetWhatsAppStatus", New Object() {APIKey, countryCode, number, status},
                           Me.SetWhatsAppStatusOperationCompleted, userState)
        End Sub

        Private Sub OnSetWhatsAppStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetWhatsAppStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    SetWhatsAppStatusCompleted(Me,
                                               New SetWhatsAppStatusCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        <
            System.Web.Services.Protocols.SoapDocumentMethodAttribute _
                ("http://tempuri.org/GetAccountLang", RequestNamespace := "http://tempuri.org/",
                 ResponseNamespace := "http://tempuri.org/",
                 Use := System.Web.Services.Description.SoapBindingUse.Literal,
                 ParameterStyle := System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
        Public Function GetAccountLang(ByVal APIKey As String, ByVal UserId As Integer) As String
            Dim results() As Object = Me.Invoke("GetAccountLang", New Object() {APIKey, UserId})
            Return CType(results(0), String)
        End Function

        '''<remarks/>
        Public Overloads Sub GetAccountLangAsync(ByVal APIKey As String, ByVal UserId As Integer)
            Me.GetAccountLangAsync(APIKey, UserId, Nothing)
        End Sub

        '''<remarks/>
        Public Overloads Sub GetAccountLangAsync(ByVal APIKey As String, ByVal UserId As Integer,
                                                 ByVal userState As Object)
            If (Me.GetAccountLangOperationCompleted Is Nothing) Then
                Me.GetAccountLangOperationCompleted = AddressOf Me.OnGetAccountLangOperationCompleted
            End If
            Me.InvokeAsync("GetAccountLang", New Object() {APIKey, UserId}, Me.GetAccountLangOperationCompleted,
                           userState)
        End Sub

        Private Sub OnGetAccountLangOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountLangCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,
                                                                                                 System.Web.Services.
                        Protocols.InvokeCompletedEventArgs)
                RaiseEvent _
                    GetAccountLangCompleted(Me,
                                            New GetAccountLangCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                 invokeArgs.Cancelled,
                                                                                 invokeArgs.UserState))
            End If
        End Sub

        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub

        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing) _
                OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024) _
                AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub TryAuthCompletedEventHandler(ByVal sender As Object, ByVal e As TryAuthCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class TryAuthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetServerSettingsCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetServerSettingsCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetServerSettingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetAllServerSettingsCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetAllServerSettingsCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetAllServerSettingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetDeliveryDomainSettingsCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetDeliveryDomainSettingsCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetDeliveryDomainSettingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetUserDeliveryDomainSettingsCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetUserDeliveryDomainSettingsCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetUserDeliveryDomainSettingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetEngineServersCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetEngineServersCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetEngineServersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetDomainPreferredServersCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetDomainPreferredServersCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetDomainPreferredServersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub UpdateServerActiveCompletedEventHandler _
        (ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetCampaignSubscribersCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetCampaignSubscribersCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetCampaignSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetActiveCampaignSubscribersCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetActiveCampaignSubscribersCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetActiveCampaignSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetHeaderFooterCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetHeaderFooterCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetHeaderFooterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub CompleteBatchCompletedEventHandler _
        (ByVal sender As Object, ByVal e As CompleteBatchCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class CompleteBatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub BatchUpdateCampaignCategorySubscriberCompletedEventHandler _
        (ByVal sender As Object, ByVal e As BatchUpdateCampaignCategorySubscriberCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class BatchUpdateCampaignCategorySubscriberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub UpdateEmailSentCompletedEventHandler _
        (ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub BatchUpdateFailedSentLogCompletedEventHandler _
        (ByVal sender As Object, ByVal e As BatchUpdateFailedSentLogCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class BatchUpdateFailedSentLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub BatchUpdateSMSTransLogCompletedEventHandler _
        (ByVal sender As Object, ByVal e As BatchUpdateSMSTransLogCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class BatchUpdateSMSTransLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub UpdateServerStatusCompletedEventHandler _
        (ByVal sender As Object, ByVal e As UpdateServerStatusCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class UpdateServerStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub UpdateServerStatusRPCCompletedEventHandler _
        (ByVal sender As Object, ByVal e As UpdateServerStatusRPCCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class UpdateServerStatusRPCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub HealthCheckCompletedEventHandler _
        (ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub GetUserTimezoneIndexCompletedEventHandler _
        (ByVal sender As Object, ByVal e As GetUserTimezoneIndexCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class GetUserTimezoneIndexCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub GetUserReturnPathCompletedEventHandler _
        (ByVal sender As Object, ByVal e As GetUserReturnPathCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class GetUserReturnPathCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetUserDomainsCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetUserDomainsCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetUserDomainsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetUserReturnPathsCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetUserReturnPathsCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetUserReturnPathsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetUserSettingsCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetUserSettingsCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetUserSettingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub GetAliveServerCompletedEventHandler _
        (ByVal sender As Object, ByVal e As GetAliveServerCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class GetAliveServerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub GetCampaignSentCountCompletedEventHandler _
        (ByVal sender As Object, ByVal e As GetCampaignSentCountCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class GetCampaignSentCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetCampaignLinksCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetCampaignLinksCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetCampaignLinksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub AddNewCampaignLinkCompletedEventHandler _
        (ByVal sender As Object, ByVal e As AddNewCampaignLinkCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class AddNewCampaignLinkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), Integer)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetActiveSMSCampaignSubscribersCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetActiveSMSCampaignSubscribersCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetActiveSMSCampaignSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub CompleteSMSCampaignCompletedEventHandler _
        (ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub UnsubscribePhoneCompletedEventHandler _
        (ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetServersInGroupCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetServersInGroupCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetServersInGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetCampaignCreativesCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetCampaignCreativesCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetCampaignCreativesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetURLTrackingsCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetURLTrackingsCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetURLTrackingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetCategoryTrackingsCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetCategoryTrackingsCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetCategoryTrackingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub CompleteWhatsAppCampaignCompletedEventHandler _
        (ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub UploadWhatsAppStatusCompletedEventHandler _
        (ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetActiveWhatsAppCampaignSubscribersCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetActiveWhatsAppCampaignSubscribersCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetActiveWhatsAppCampaignSubscribersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub dsGetActiveWhatsAppChannelCompletedEventHandler _
        (ByVal sender As Object, ByVal e As dsGetActiveWhatsAppChannelCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class dsGetActiveWhatsAppChannelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), System.Data.DataSet)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub SetWhatsAppStatusCompletedEventHandler _
        (ByVal sender As Object, ByVal e As SetWhatsAppStatusCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class SetWhatsAppStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), Boolean)
            End Get
        End Property
    End Class

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>
    Public Delegate Sub GetAccountLangCompletedEventHandler _
        (ByVal sender As Object, ByVal e As GetAccountLangCompletedEventArgs)

    '''<remarks/>
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),
            System.Diagnostics.DebuggerStepThroughAttribute(),
            System.ComponentModel.DesignerCategoryAttribute("code")>
    Partial Public Class GetAccountLangCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs

        Private results() As Object

        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean,
                       ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub

        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0), String)
            End Get
        End Property
    End Class
End Namespace
